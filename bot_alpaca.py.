# bot.py
# -*- coding: utf-8 -*-

import os, asyncio, logging
from datetime import datetime, timezone
from telegram import Update, BotCommand
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# ===== Logging =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# ===== ENV =====
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
ALPACA_API_KEY = os.getenv("ALPACA_API_KEY", "").strip()
ALPACA_API_SECRET = os.getenv("ALPACA_API_SECRET", "").strip()
ALPACA_BASE_URL = os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets")
ALPACA_DATA_URL = os.getenv("ALPACA_DATA_URL", "https://data.alpaca.markets")

# ===== STATE =====
STATE = {}

def default_state():
    return {
        "autotrade": False,
        "mode": "safe",
        "last_scan_txt": "",
    }

# ===== Dummy Alpaca funcs (–∑–∞–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏) =====
async def alp_account():
    return {
        "status": "ACTIVE",
        "cash": 100000,
        "equity": 100000,
        "buying_power": 200000,
    }

async def alp_clock():
    return {
        "is_open": True,
    }

def fmt_usd(v):
    return f"${v:,.2f}"

def now_utc():
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")

# ===== Handlers =====
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏ /help")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "üìã –ö–æ–º–∞–Ω–¥–∏:\n"
        "/signals ‚Äî –°–∫–∞–Ω —Ä–∏–Ω–∫—ñ–≤ (–∞–∫—Ü—ñ—ó+–∫—Ä–∏–ø—Ç–æ)\n"
        "/signals_alpaca ‚Äî –°–∫–∞–Ω –ª–∏—à–µ –∞–∫—Ü—ñ–π\n"
        "/alp_on /alp_off ‚Äî –£–≤—ñ–º–∫/–í–∏–º–∫ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥\n"
        "/alp_status ‚Äî –°—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—É\n"
        "/aggressive /scalp /default /swing /safe ‚Äî –ü—Ä–æ—Ñ—ñ–ª—ñ\n"
        "/wl_crypto /wl_stocks ‚Äî –í–æ—á–ª—ñ—Å—Ç–∏\n"
        "/status ‚Äî –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
    )
    await update.message.reply_text(txt)

async def autotrade_on_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE.setdefault(update.effective_chat.id, default_state())
    st["autotrade"] = True
    await update.message.reply_text("‚úÖ Autotrade: ON")

async def autotrade_off_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE.setdefault(update.effective_chat.id, default_state())
    st["autotrade"] = False
    await update.message.reply_text("‚èπ Autotrade: OFF")

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE.setdefault(update.effective_chat.id, default_state())
    try:
        acc = await alp_account()
        clk = await alp_clock()
        txt = (
            f"üì¶ Alpaca: status={acc.get('status','?')}, "
            f"equity={fmt_usd(acc.get('equity',0))}, "
            f"cash={fmt_usd(acc.get('cash',0))}, "
            f"buying_power={fmt_usd(acc.get('buying_power',0))}\n"
            f"üïí Market open: {'YES' if clk.get('is_open') else 'NO'}\n"
            f"Mode={st.get('mode')} ¬∑ Autotrade={'ON' if st.get('autotrade') else 'OFF'}\n"
            f"UTC {now_utc()}"
        )
    except Exception as e:
        txt = f"‚ùå status error: {e}"
    await update.message.reply_text(txt)

async def signals_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE.setdefault(update.effective_chat.id, default_state())
    rep = "üìä –°–∫–∞–Ω —Ä–∏–Ω–∫—ñ–≤ (–∞–∫—Ü—ñ—ó+–∫—Ä–∏–ø—Ç–æ)... [—Ç—É—Ç –º–∞—î –±—É—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞]"
    st["last_scan_txt"] = rep
    await update.message.reply_text(rep)

async def signals_alpaca_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = STATE.setdefault(update.effective_chat.id, default_state())
    rep = "üìà –°–∫–∞–Ω —Ç—ñ–ª—å–∫–∏ –∞–∫—Ü—ñ–π (Alpaca)... [—Ç—É—Ç –º–∞—î –±—É—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞]"
    st["last_scan_txt"] = rep
    await update.message.reply_text(rep)

# ===== Post Init (–æ–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏) =====
async def post_init(app):
    try:
        await app.bot.delete_my_commands()
    except Exception:
        pass
    await app.bot.set_my_commands([
        BotCommand("start", "–ü–æ—á–∞—Ç–∏"),
        BotCommand("help", "–î–æ–ø–æ–º–æ–≥–∞"),
        BotCommand("signals", "–°–∫–∞–Ω –∞–∫—Ü—ñ—ó+–∫—Ä–∏–ø—Ç–æ"),
        BotCommand("signals_alpaca", "–°–∫–∞–Ω —Ç—ñ–ª—å–∫–∏ –∞–∫—Ü—ñ–π"),
        BotCommand("alp_on", "–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥"),
        BotCommand("alp_off", "–í–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥"),
        BotCommand("alp_status", "–°—Ç–∞—Ç—É—Å Alpaca"),
        BotCommand("aggressive", "–ü—Ä–æ—Ñ—ñ–ª—å: Aggressive"),
        BotCommand("scalp", "–ü—Ä–æ—Ñ—ñ–ª—å: Scalp"),
        BotCommand("default", "–ü—Ä–æ—Ñ—ñ–ª—å: Default"),
        BotCommand("swing", "–ü—Ä–æ—Ñ—ñ–ª—å: Swing"),
        BotCommand("safe", "–ü—Ä–æ—Ñ—ñ–ª—å: Safe"),
        BotCommand("wl_crypto", "Watchlist Crypto"),
        BotCommand("wl_stocks", "Watchlist Stocks"),
        BotCommand("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
    ])

# ===== Main =====
def main():
    app = (
        Application.builder()
        .token(TG_TOKEN)
        .post_init(post_init)
        .build()
    )

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("alp_on", autotrade_on_cmd))
    app.add_handler(CommandHandler("alp_off", autotrade_off_cmd))
    app.add_handler(CommandHandler("alp_status", status_cmd))
    app.add_handler(CommandHandler("signals", signals_cmd))
    app.add_handler(CommandHandler("signals_alpaca", signals_alpaca_cmd))

    app.run_polling()

if __name__ == "__main__":
    main()
