# -*- coding: utf-8 -*-
"""
ProfitSignalsBot ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è Bybit.
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- PTB v20 (python-telegram-bot) + AIORateLimiter
- –û–±—â–∞—è aiohttp-—Å–µ—Å—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTTP/HTTPS –ø—Ä–æ–∫—Å–∏ (env: BYBIT_PROXY)
- –ü—É–±–ª–∏—á–Ω—ã–µ GET (—Ç–∏–∫–µ—Ä—ã) —á–µ—Ä–µ–∑ api_get_json (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ JSON)
- –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Bybit v5 (–ø–æ–¥–ø–∏—Å—å HMAC) ‚Äî –∑–∞–≥–æ—Ç–æ–≤–∫–∞
- –ö–æ–º–∞–Ω–¥—ã: /start /status /signals /trade_on /trade_off /auto_on /auto_off
           /set_size <usdt> /set_lev <x> /set_risk <sl%> <tp%>
- –ü—É–ª—å—Å ‚Äúheartbeat‚Äù –≤ –ª–æ–≥–∞—Ö –∏ –∞–¥–º–∏–Ω-—á–∞—Ç —Ä–∞–∑ –≤ N –º–∏–Ω—É—Ç (env: HEARTBEAT_MIN)
"""

import os
import hmac
import time
import json
import asyncio
import hashlib
from typing import Any, Dict, Optional

from aiohttp import ClientSession, ClientTimeout

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    AIORateLimiter,
    CommandHandler,
    ContextTypes,
)

# ========= –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è =========
BOT_TOKEN         = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
ADMIN_ID          = int(os.getenv("ADMIN_ID", "0") or 0)

BYBIT_BASE_URL    = os.getenv("BYBIT_BASE_URL", "https://api.bybit.com").strip()
BYBIT_API_KEY     = os.getenv("BYBIT_API_KEY", "").strip()
BYBIT_API_SECRET  = os.getenv("BYBIT_API_SECRET", "").strip()

# HTTP/HTTPS proxy: —Ñ–æ—Ä–º–∞—Ç http://user:pass@ip:port
PROXY_URL         = os.getenv("BYBIT_PROXY", "").strip()

# –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏)
TRADE_ENABLED     = (os.getenv("TRADE_ENABLED", "ON").upper() == "ON")
SIZE_USDT         = float(os.getenv("SIZE_USDT", "5"))
LEVERAGE          = int(os.getenv("LEVERAGE", "3"))
SL_PCT            = float(os.getenv("SL_PCT", "3"))
TP_PCT            = float(os.getenv("TP_PCT", "5"))

# –ê–≤—Ç–æ—Å–∫–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–∏–Ω—É—Ç—ã)
DEFAULT_SCAN_MIN  = int(os.getenv("SCAN_MIN", "15"))
HEARTBEAT_MIN     = int(os.getenv("HEARTBEAT_MIN", "60"))

# ======== –ì–ª–æ–±–∞–ª—ã ========
app: Optional[Application] = None
http: Optional[ClientSession] = None
auto_scan_job = None
heartbeat_job = None

UTC_FMT = "%Y-%m-%d %H:%M:%SZ"

# ========= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è HTTP-–æ–±–≤—è–∑–∫–∞ =========

async def http_start():
    """–°–æ–∑–¥–∞—ë–º –æ–±—â—É—é aiohttp-—Å–µ—Å—Å–∏—é."""
    global http
    if http is None:
        http = ClientSession(timeout=ClientTimeout(total=25))

async def http_stop():
    """–ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—â—É—é aiohttp-—Å–µ—Å—Å–∏—é."""
    global http
    if http and not http.closed:
        await http.close()
    http = None

async def api_get_json(url: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π GET JSON. –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω).
    –ï—Å–ª–∏ Bybit –≤–µ—Ä–Ω—É–ª HTML (403 –∏ —Ç.–ø.), –±—Ä–æ—Å–∞–µ—Ç RuntimeError —Å –∫—Ä–∞—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    assert http is not None, "HTTP session not started"
    kwargs: Dict[str, Any] = {"params": params or {}}
    if PROXY_URL:
        kwargs["proxy"] = PROXY_URL

    async with http.get(url, **kwargs) as r:
        r.raise_for_status()
        ct = r.headers.get("Content-Type", "")
        if "application/json" not in ct:
            text = await r.text()
            raise RuntimeError(f"Bybit non-JSON (possible IP block): {text[:200]}")
        return await r.json()

def _sign_v5(params: Dict[str, Any], secret: str) -> str:
    """
    –ü–æ–¥–ø–∏—Å—å –¥–ª—è Bybit v5: HMAC-SHA256(payload).
    payload = timestamp + api_key + recv_window + (json(params) –∏–ª–∏ "" –¥–ª—è GET –±–µ–∑ —Ç–µ–ª–∞)
    –ó–¥–µ—Å—å –ø—Ä–∏–º–µ–Ω–∏–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è application/x-www-form-urlencoded (–æ–±—ã—á–Ω—ã–π –¥–ª—è v5 private).
    –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –∫–ª—é—á—É.
    """
    # –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–Ω–¥–ø–æ–π–Ω—Ç–∞—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è stringToSign –≤ –∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    # –î–ª—è –±–∞–∑–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∏ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
    sorted_items = "&".join([f"{k}={params[k]}" for k in sorted(params)])
    return hmac.new(
        secret.encode("utf-8"),
        sorted_items.encode("utf-8"),
        hashlib.sha256,
    ).hexdigest()

async def bybit_private_post(path: str, payload: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ POST –∫ Bybit v5.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ –∏ —Ç.–ø.).
    """
    assert http is not None, "HTTP session not started"
    if not BYBIT_API_KEY or not BYBIT_API_SECRET:
        raise RuntimeError("BYBIT_API_KEY/SECRET –Ω–µ –∑–∞–¥–∞–Ω—ã")

    url = f"{BYBIT_BASE_URL}{path}"
    ts = str(int(time.time() * 1000))
    recv_window = "5000"

    params = {
        "api_key": BYBIT_API_KEY,
        "timestamp": ts,
        "recv_window": recv_window,
        **payload,
    }
    sign = _sign_v5(params, BYBIT_API_SECRET)
    params["sign"] = sign

    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    data = "&".join([f"{k}={params[k]}" for k in params])

    kwargs: Dict[str, Any] = {"headers": headers, "data": data}
    if PROXY_URL:
        kwargs["proxy"] = PROXY_URL

    async with http.post(url, **kwargs) as r:
        r.raise_for_status()
        ct = r.headers.get("Content-Type", "")
        if "application/json" not in ct:
            text = await r.text()
            raise RuntimeError(f"Bybit non-JSON (private): {text[:200]}")
        return await r.json()

# ========= –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ =========

async def initial_scan() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ (linear) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /signals –∏ –∞–≤—Ç–æ—Å–∫–∞–Ω–µ.
    """
    return await api_get_json(
        f"{BYBIT_BASE_URL}/v5/market/tickers",
        {"category": "linear"}
    )

def utc_now_str() -> str:
    import datetime as dt
    return dt.datetime.utcnow().strftime(UTC_FMT)

# ========= –ö–æ–º–∞–Ω–¥—ã =========

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤. –ö–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/signals ‚Äî —Å–∫–∞–Ω —Å–∏–ª—å–Ω—ã—Ö (top30)\n"
        "/trade_on | /trade_off ‚Äî –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è\n"
        f"/auto_on {DEFAULT_SCAN_MIN} | /auto_off ‚Äî –∞–≤—Ç–æ—Å–∫–∞–Ω\n"
        f"/set_size {int(SIZE_USDT)} ‚Äî —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ USDT\n"
        f"/set_lev {LEVERAGE} ‚Äî –ø–ª–µ—á–æ\n"
        f"/set_risk {int(SL_PCT)} {int(TP_PCT)} ‚Äî SL/TP –≤ %\n"
    )
    await update.message.reply_text(text)

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    proxy_state = "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" if PROXY_URL else "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
    text = (
        f"–°—Ç–∞—Ç—É—Å: {'ON' if auto_scan_job else 'OFF'} ¬∑ –∫–∞–∂–¥—ã–µ "
        f"{DEFAULT_SCAN_MIN if not auto_scan_job else int(auto_scan_job.interval.total_seconds()/60)} –º–∏–Ω.\n"
        f"SL={SL_PCT:.2f}% ¬∑ TP={TP_PCT:.2f}%\n"
        f"TRADE_ENABLED={'ON' if TRADE_ENABLED else 'OFF'} ¬∑ SIZE={SIZE_USDT:.2f} USDT\n"
        f"¬∑ LEV={LEVERAGE}\n"
        "–§–∏–ª—å—Ç—Ä: TOP30\n"
        f"–ü—Ä–æ–∫—Å–∏: {proxy_state}\n"
        f"UTC: {utc_now_str()}"
    )
    await update.message.reply_text(text)

async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("üîé –°–∫–∞–Ω–∏—Ä—É—é —Ä—ã–Ω–æ–∫‚Ä¶")
    try:
        data = await initial_scan()
        rows = data.get("result", {}).get("list", []) or []
        count = len(rows)
        await msg.edit_text(f"üîé –°–∫–∞–Ω OK ¬∑ –ø–æ–ª—É—á–µ–Ω–æ {count} —Ç–∏–∫–µ—Ä–æ–≤ ¬∑\nUTC {utc_now_str()}")
    except Exception as e:
        # –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª —Å HTML/–æ—à–∏–±–∫–æ–π ‚Äî –∫–∞–∫ –≤ —Ç–≤–æ–µ–π –ø—Ä–µ–∂–Ω–µ–π –ª–æ–≥–∏–∫–µ
        err = str(e)
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {err[:400]}",
            disable_web_page_preview=True,
        )
        # –ø—Ä–∏–ª–æ–∂–∏–º ¬´–ª–æ–≥¬ª –∫–∞–∫ —Ñ–∞–π–ª
        try:
            from io import BytesIO
            f = BytesIO(json.dumps({"error": err}, ensure_ascii=False, indent=2).encode("utf-8"))
            f.name = "tickers.json"
            await update.message.reply_document(f)
        except:
            pass

async def cmd_trade_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TRADE_ENABLED
    TRADE_ENABLED = True
    await update.message.reply_text("–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: –í–ö–õ–Æ–ß–ï–ù–ê ‚úÖ")

async def cmd_trade_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TRADE_ENABLED
    TRADE_ENABLED = False
    await update.message.reply_text("–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: –í–´–ö–õ–Æ–ß–ï–ù–ê ‚õî")

async def cmd_set_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SIZE_USDT
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_size 5")
        return
    try:
        SIZE_USDT = max(1.0, float(context.args[0]))
        await update.message.reply_text(f"OK. SIZE_USDT={SIZE_USDT:.2f}")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

async def cmd_set_lev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global LEVERAGE
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_lev 3")
        return
    try:
        LEVERAGE = max(1, int(context.args[0]))
        await update.message.reply_text(f"OK. LEVERAGE={LEVERAGE}")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

async def cmd_set_risk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SL_PCT, TP_PCT
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_risk 3 5 (SL% TP%)")
        return
    try:
        SL_PCT = max(0.1, float(context.args[0]))
        TP_PCT = max(0.1, float(context.args[1]))
        await update.message.reply_text(f"OK. SL={SL_PCT:.2f}% ¬∑ TP={TP_PCT:.2f}%")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")

# ======= –ê–≤—Ç–æ—Å–∫–∞–Ω =======

async def do_autoscan(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id or ADMIN_ID
    try:
        data = await initial_scan()
        rows = data.get("result", {}).get("list", []) or []
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üîé –°–∫–∞–Ω OK ¬∑ –ø–æ–ª—É—á–µ–Ω–æ {len(rows)} —Ç–∏–∫–µ—Ä–æ–≤ ¬∑\nUTC {utc_now_str()}",
        )
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ—Ç–±–æ—Ä–∞/—Å–∏–≥–Ω–∞–ª–æ–≤/–æ—Ä–¥–µ—Ä–æ–≤.
        # –ù–∏–∫–∞–∫–æ–π –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—é.
    except Exception as e:
        err = str(e)
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω–µ—Ä–∞: {err[:400]}")

async def cmd_auto_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_scan_job
    minutes = DEFAULT_SCAN_MIN
    if context.args:
        try:
            minutes = max(1, int(context.args[0]))
        except:
            pass
    # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
    if auto_scan_job:
        auto_scan_job.schedule_removal()
    auto_scan_job = context.job_queue.run_repeating(
        do_autoscan,
        interval=minutes * 60,
        first=1,
        name="autoscan",
        chat_id=update.effective_chat.id
    )
    await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ—Å–∫–∞–Ω –≤–∫–ª—é—á—ë–Ω: –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω.")

async def cmd_auto_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_scan_job
    if auto_scan_job:
        auto_scan_job.schedule_removal()
        auto_scan_job = None
    await update.message.reply_text("‚èπ –ê–≤—Ç–æ—Å–∫–∞–Ω –≤—ã–∫–ª—é—á–µ–Ω.")

# ======= Heartbeat =======

async def heartbeat(context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ –ø–∏—à–µ–º –≤ –ª–æ–≥–∏, –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —à–ª—ë–º –∞–¥–º–∏–Ω—É
    if ADMIN_ID:
        try:
            await context.bot.send_message(ADMIN_ID, "üíó heartbeat")
        except:
            pass

# ========= Main =========

async def main():
    global app, heartbeat_job

    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is required")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    # –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start",     cmd_start))
    app.add_handler(CommandHandler("status",    cmd_status))
    app.add_handler(CommandHandler("signals",   cmd_signals))
    app.add_handler(CommandHandler("trade_on",  cmd_trade_on))
    app.add_handler(CommandHandler("trade_off", cmd_trade_off))
    app.add_handler(CommandHandler("auto_on",   cmd_auto_on))
    app.add_handler(CommandHandler("auto_off",  cmd_auto_off))
    app.add_handler(CommandHandler("set_size",  cmd_set_size))
    app.add_handler(CommandHandler("set_lev",   cmd_set_lev))
    app.add_handler(CommandHandler("set_risk",  cmd_set_risk))

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é
    await http_start()

    # Heartbeat
    if HEARTBEAT_MIN > 0:
        heartbeat_job = app.job_queue.run_repeating(
            heartbeat, interval=HEARTBEAT_MIN * 60, first=10, name="heartbeat"
        )

    print("Starting bot‚Ä¶")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    try:
        while True:
            await asyncio.sleep(3600)
    finally:
        await app.updater.stop()
        await app.stop()
        await http_stop()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
