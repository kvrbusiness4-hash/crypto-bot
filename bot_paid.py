# -*- coding: utf-8 -*-
"""
ProfitSignalsBot ‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –ø—Ä–æ–∫—Å—ñ –¥–ª—è Bybit.
–ü—Ä–∞–≤–∫–∞: —É—Å—ñ HTTP-–∑–∞–ø–∏—Ç–∏ –¥–æ Bybit –π–¥—É—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ (env: BYBIT_PROXY).
"""

import os
import asyncio
import json
from datetime import datetime

import aiohttp
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

# ========= –ö–æ–Ω—Ñ—ñ–≥ =========
BOT_TOKEN   = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID    = os.getenv("ADMIN_ID")  # –Ω–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ
BYBIT_PROXY = os.getenv("BYBIT_PROXY")  # –Ω–∞–ø—Ä.: socks5://user:pass@ip:port
BYBIT_BASE  = os.getenv("BYBIT_BASE", "https://api.bybit.com")

SCAN_MINUTES_DEFAULT = 15  # —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–∫–∞–Ω—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

# —Å—Ç–∞–Ω –∞–≤—Ç–æ—Å–∫–∞–Ω–µ—Ä–∞ –≤ –ø–∞–º º—è—Ç—ñ –ø—Ä–æ—Ü–µ—Å–∞
state = {
    "auto_on": False,
    "auto_task": None,
    "minutes": SCAN_MINUTES_DEFAULT,
}

# ========= –£—Ç–∏–ª—ñ—Ç–∏ =========
def _utcnow_str() -> str:
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")


async def bybit_request(path: str, params: dict | None = None, method: str = "GET") -> dict:
    """HTTP-–∑–∞–ø–∏—Ç –¥–æ Bybit —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ (—è–∫—â–æ BYBIT_PROXY –∑–∞–¥–∞–Ω–∏–π)."""
    url = f"{BYBIT_BASE}{path}"
    params = params or {}

    # –≤–∞–∂–ª–∏–≤–æ: proxy –ø–µ—Ä–µ–¥–∞—î–º–æ –ü–†–Ø–ú–û –≤ –∑–∞–ø–∏—Ç
    kwargs = {"proxy": BYBIT_PROXY, "timeout": aiohttp.ClientTimeout(total=15)}

    async with aiohttp.ClientSession() as session:
        try:
            if method.upper() == "GET":
                async with session.get(url, params=params, **kwargs) as resp:
                    # —ñ–Ω–∫–æ–ª–∏ –∑–∞–º—ñ—Å—Ç—å JSON –ø—Ä–∏—Ö–æ–¥–∏—Ç—å html (–∫–æ–ª–∏ IP –±–ª–æ—á–∞—Ç—å) ‚Äî –ø—ñ–¥—Ö–æ–ø–∏–º–æ —Ü–µ
                    ct = resp.headers.get("Content-Type", "")
                    text = await resp.text()
                    if "application/json" not in ct:
                        return {"error": "non_json", "content_type": ct, "text": text[:400]}
                    return json.loads(text)
            else:
                async with session.post(url, json=params, **kwargs) as resp:
                    ct = resp.headers.get("Content-Type", "")
                    text = await resp.text()
                    if "application/json" not in ct:
                        return {"error": "non_json", "content_type": ct, "text": text[:400]}
                    return json.loads(text)
        except Exception as e:
            return {"error": str(e)}


async def scan_top30_once() -> str:
    """
    –ü—Ä–æ—Å—Ç–∏–π —Å–∫–∞–Ω–µ—Ä: —Ç—è–≥–Ω–µ —Ç—ñ–∫–µ—Ä–∏ 'linear' —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ API –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    data = await bybit_request("/v5/market/tickers", {"category": "linear"})
    if "error" in data:
        if data["error"] == "non_json":
            return (f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: Bybit non-JSON (–º–æ–∂–ª–∏–≤–∏–π IP block)\n"
                    f"{data.get('text','')}")
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {data['error']}"

    # –±–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ
    result = data.get("result", {})
    list_ = result.get("list", [])
    count = len(list_)
    return f"üîç –°–∫–∞–Ω OK ¬∑ –æ—Ç—Ä–∏–º–∞–Ω–æ {count} —Ç—ñ–∫–µ—Ä—ñ–≤ ¬∑ UTC { _utcnow_str() }"


# ========= –ö–æ–º–∞–Ω–¥–∏ =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/status ‚Äî —Å—Ç–∞–Ω\n"
        "/signals ‚Äî —Ä–∞–∑–æ–≤–∏–π —Å–∫–∞–Ω\n"
        "/auto_on 15 ‚Äî –∞–≤—Ç–æ—Å–∫–∞–Ω –∫–æ–∂–Ω—ñ N —Ö–≤\n"
        "/auto_off ‚Äî –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ—Å–∫–∞–Ω"
    )


async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = [
        f"–°—Ç–∞—Ç—É—Å: {'ON' if state['auto_on'] else 'OFF'} ¬∑ –∫–æ–∂–Ω—ñ {state['minutes']} —Ö–≤.",
        f"–ü—Ä–æ–∫—Å—ñ: {'–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è' if BYBIT_PROXY else '–Ω–µ –∑–∞–¥–∞–Ω–æ'}",
        f"UTC: { _utcnow_str() }",
    ]
    await update.message.reply_text("\n".join(text))


async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîé –°–∫–∞–Ω—É—é —Ä–∏–Ω–æ–∫‚Ä¶")
    info = await scan_top30_once()
    await update.message.reply_text(info)


async def _auto_loop(context: ContextTypes.DEFAULT_TYPE):
    # —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —É —Ñ–æ–Ω—ñ –∫–æ–∂–Ω—ñ N —Ö–≤–∏–ª–∏–Ω
    info = await scan_top30_once()
    chat_id = context.job.chat_id if context.job else (ADMIN_ID if ADMIN_ID else None)
    if chat_id:
        try:
            await context.bot.send_message(chat_id=chat_id, text=info)
        except Exception:
            pass


async def cmd_auto_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # /auto_on 15
    minutes = SCAN_MINUTES_DEFAULT
    if context.args:
        try:
            minutes = max(1, int(context.args[0]))
        except Exception:
            pass

    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –¥–∂–æ–±—É —è–∫—â–æ –±—É–ª–∞
    if state["auto_task"]:
        state["auto_task"].cancel()

    # —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ JobQueue (PTB v20)
    job_queue = context.application.job_queue
    job = job_queue.run_repeating(_auto_loop, interval=minutes * 60, first=5, chat_id=update.effective_chat.id)

    state["auto_task"] = job
    state["auto_on"] = True
    state["minutes"] = minutes

    await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ—Å–∫–∞–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ: –∫–æ–∂–Ω—ñ {minutes} —Ö–≤.")


async def cmd_auto_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if state["auto_task"]:
        state["auto_task"].cancel()
    state["auto_task"] = None
    state["auto_on"] = False
    await update.message.reply_text("üõë –ê–≤—Ç–æ—Å–∫–∞–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.")


# ========= Main =========
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is required")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start",  cmd_start))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("signals", cmd_signals))
    app.add_handler(CommandHandler("auto_on", cmd_auto_on))
    app.add_handler(CommandHandler("auto_off", cmd_auto_off))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è‚Ä¶")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    # –Ω–µ –∑–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
