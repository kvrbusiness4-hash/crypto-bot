# bot_paid.py
# -*- coding: utf-8 -*-

import os
import logging
from typing import Any, Dict, Optional

import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    AIORateLimiter,   # ‚Üê –æ—Å—å —Ç—É—Ç —Ç–µ–ø–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ
)
from telegram.ext._rate_limiter import AIORateLimiter  # PTB 20.x

# ------------ –õ–æ–≥–∏ ------------
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(message)s",
)
L = logging.getLogger("bot")

# ------------ –ö–æ–Ω—Ñ—ñ–≥ / ENV ------------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
ADMIN_ID = os.getenv("ADMIN_ID", "").strip()

BYBIT_BASE_URL = os.getenv("BYBIT_BASE_URL", "https://api.bybit.com").rstrip("/")
BYBIT_PROXY = os.getenv("BYBIT_PROXY", "").strip()  # –Ω–∞–ø—Ä.: http://user:pass@ip:port

DEFAULT_SCAN_MIN = int(os.getenv("DEFAULT_SCAN_MIN", os.getenv("HEARTBEAT_MIN", "15")))
SIZE_USDT = float(os.getenv("SIZE_USDT", "5"))
LEVERAGE = int(os.getenv("LEVERAGE", "3"))
SL_PCT = float(os.getenv("SL_PCT", "3"))
TP_PCT = float(os.getenv("TP_PCT", "5"))
TRADE_ENABLED = os.getenv("TRADE_ENABLED", "ON").upper() == "ON"

UTC_FMT = "%Y-%m-%d %H:%M:%SZ"

# ------------ –ì–ª–æ–±–∞–ª—å–Ω—ñ ------------
app: Optional[Application] = None
scheduler: Optional[AsyncIOScheduler] = None
auto_scan_job = None  # APScheduler job-–æ–±'—î–∫—Ç


# ------------ –£—Ç–∏–ª—ñ—Ç–∏ ------------
def utc_now_str() -> str:
    import datetime as dt
    return dt.datetime.utcnow().strftime(UTC_FMT)


def get_interval_min(job) -> int:
    """
    –ë–µ–∑–ø–µ—á–Ω–æ –¥—ñ—Å—Ç–∞—î —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–∫–∞–Ω—É –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –≤–µ—Ä—Å—ñ—ó APScheduler/PTB.
    –ü–æ–≤–µ—Ä—Ç–∞—î DEFAULT_SCAN_MIN, —è–∫—â–æ job –Ω–µ–º–∞—î –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ñ–Ω—à–∞.
    """
    try:
        if not job:
            return int(DEFAULT_SCAN_MIN)

        # APScheduler: job.trigger.interval -> timedelta
        trig = getattr(job, "trigger", None)
        if trig is not None:
            iv = getattr(trig, "interval", None)
            if iv is not None:
                ts = getattr(iv, "total_seconds", None)
                if callable(ts):
                    sec = int(ts())
                else:
                    sec = int(iv)
                return max(1, sec // 60) if sec >= 60 else max(1, sec)

        # –ù–∞ –¥–µ—è–∫–∏—Ö –∑–±—ñ—Ä–∫–∞—Ö PTB JobQueue –º–æ–∂–µ –±—É—Ç–∏ .interval (td –∞–±–æ —Å–µ–∫—É–Ω–¥–∏)
        iv = getattr(job, "interval", None)
        if iv is not None:
            ts = getattr(iv, "total_seconds", None)
            if callable(ts):
                sec = int(ts())
            else:
                sec = int(iv)
            return max(1, sec // 60) if sec >= 60 else max(1, sec)
    except Exception:
        pass
    return int(DEFAULT_SCAN_MIN)


def _requests_proxies() -> Optional[Dict[str, str]]:
    """
    –ì–æ—Ç—É—î dict –¥–ª—è requests –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º BYBIT_PROXY.
    –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ http/https/socks5 (—á–µ—Ä–µ–∑ requests[socks] —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ).
    """
    if not BYBIT_PROXY:
        return None
    return {
        "http": BYBIT_PROXY,
        "https": BYBIT_PROXY,
    }


async def api_get_json(path: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π wrapper –Ω–∞–¥ requests.get (—á–µ—Ä–µ–∑ to_thread), –∑ –ø—Ä–æ–∫—Å—ñ —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é 403/HTML.
    """
    url = f"{BYBIT_BASE_URL}{path}"
    proxies = _requests_proxies()
    headers = {"Accept": "application/json"}

    def _do() -> Dict[str, Any]:
        r = requests.get(url, params=params, headers=headers, timeout=20, proxies=proxies)
        r.raise_for_status()
        ct = r.headers.get("content-type", "")
        # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –ø—Ä–∏–π—à–æ–≤ HTML (IP block/403 —Å—Ç–æ—Ä—ñ–Ω–∫–∞)
        if "application/json" not in ct.lower():
            raise RuntimeError(f"Bybit non-JSON (possible IP block): {r.text[:200]}")
        return r.json()

    return await asyncio.to_thread(_do)


async def initial_scan() -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Ç—ñ–∫–µ—Ä—ñ–≤ (linear).
    """
    return await api_get_json("/v5/market/tickers", {"category": "linear"})


# ------------ –ö–æ–º–∞–Ω–¥–∏ ------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤. –ö–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/signals ‚Äî —Å–∫–∞–Ω —Å–∏–ª—å–Ω—ã—Ö (top30)\n"
        "/trade_on | /trade_off ‚Äî –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è\n"
        f"/auto_on {DEFAULT_SCAN_MIN} | /auto_off ‚Äî –∞–≤—Ç–æ—Å–∫–∞–Ω\n"
        f"/set_size {int(SIZE_USDT)} ‚Äî —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –≤ USDT\n"
        f"/set_lev {LEVERAGE} ‚Äî –ø–ª–µ—á–æ\n"
        f"/set_risk {int(SL_PCT)} {int(TP_PCT)} ‚Äî SL/TP –≤ %"
    )
    await update.message.reply_text(text)


async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    interval_min = get_interval_min(auto_scan_job)
    proxy_state = "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" if BYBIT_PROXY else "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"

    text = (
        f"–°—Ç–∞—Ç—É—Å: {'ON' if auto_scan_job else 'OFF'} ¬∑ –∫–∞–∂–¥—ã–µ {interval_min} –º–∏–Ω.\n"
        f"SL={SL_PCT:.2f}% ¬∑ TP={TP_PCT:.2f}%\n"
        f"TRADE_ENABLED={'ON' if TRADE_ENABLED else 'OFF'} ¬∑ SIZE={SIZE_USDT:.2f} USDT\n"
        f"¬∑ LEV={LEVERAGE}\n"
        f"–§–∏–ª—å—Ç—Ä: TOP30\n"
        f"–ü—Ä–æ–∫—Å–∏: {proxy_state}\n"
        f"UTC: {utc_now_str()}"
    )
    await update.message.reply_text(text)


async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = await update.message.reply_text("üîé –°–∫–∞–Ω–∏—Ä—É—é —Ä—ã–Ω–æ–∫‚Ä¶")
    try:
        data = await initial_scan()
        rows = data.get("result", {}).get("list", []) or []
        await msg.edit_text(f"üîç –°–∫–∞–Ω OK ¬∑ –ø–æ–ª—É—á–µ–Ω–æ {len(rows)} —Ç–∏–∫–µ—Ä–æ–≤ ¬∑\nUTC {utc_now_str()}")
    except Exception as e:
        # –∫–∏–¥–∞—î–º–æ —Ñ–∞–π–ª –∑ ‚Äú—Ç—ñ–ª–æ–º‚Äù –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∏ 403/HTML
        try:
            j = {"error": str(e)}
            s = json.dumps(j, ensure_ascii=False, indent=2)
        except Exception:
            s = str(e)
        await msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {s[:300]}..."
        )


async def cmd_trade_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TRADE_ENABLED
    TRADE_ENABLED = True
    await update.message.reply_text("–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: –í–ö–õ–Æ–ß–ï–ù–ê ‚úÖ")


async def cmd_trade_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global TRADE_ENABLED
    TRADE_ENABLED = False
    await update.message.reply_text("–ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è: –í–´–ö–õ–Æ–ß–ï–ù–ê ‚õîÔ∏è")


async def cmd_set_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SIZE_USDT
    try:
        v = float(context.args[0])
        if v <= 0:
            raise ValueError
        SIZE_USDT = v
        await update.message.reply_text(f"OK. SIZE_USDT={SIZE_USDT:.2f}")
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_size 5")


async def cmd_set_lev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global LEVERAGE
    try:
        v = int(context.args[0])
        if v < 1:
            raise ValueError
        LEVERAGE = v
        await update.message.reply_text(f"OK. LEVERAGE={LEVERAGE}")
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_lev 3")


async def cmd_set_risk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SL_PCT, TP_PCT
    try:
        sl = float(context.args[0])
        tp = float(context.args[1])
        if sl <= 0 or tp <= 0:
            raise ValueError
        SL_PCT, TP_PCT = sl, tp
        await update.message.reply_text(f"OK. SL={SL_PCT:.2f}%  TP={TP_PCT:.2f}%")
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_risk 3 5")


# ------------ –ê–≤—Ç–æ—Å–∫–∞–Ω/–•–∞—Ä—Ç–±–∏—Ç ------------
async def heartbeat(ctx: ContextTypes.DEFAULT_TYPE):
    if ADMIN_ID:
        try:
            await app.bot.send_message(ADMIN_ID, "üíó heartbeat")
        except Exception:
            pass


async def auto_scan_tick():
    """
    –¢–µ —Å–∞–º–µ, —â–æ /signals, –∞–ª–µ –±–µ–∑ —á–∞—Ç—É‚Äî–ø–∏—à–µ –∞–¥–º—ñ–Ω–∞–º ( –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ ), –≥–æ–ª–æ–≤–Ω–µ‚Äî–ª–æ–≥—ñ–∫–∞ —Å–∫–∞–Ω—É.
    """
    try:
        data = await initial_scan()
        rows = data.get("result", {}).get("list", []) or []
        L.info("Auto-scan OK: %s tickers", len(rows))
    except Exception as e:
        L.error("Auto-scan error: %s", e)


async def cmd_auto_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_scan_job
    # —ñ–Ω—Ç–µ—Ä–≤–∞–ª —É —Ö–≤–∏–ª–∏–Ω–∞—Ö –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç
    try:
        minutes = int(context.args[0]) if context.args else DEFAULT_SCAN_MIN
        minutes = max(1, minutes)
    except Exception:
        minutes = DEFAULT_SCAN_MIN

    # –∑–Ω—ñ–º–∞—î–º–æ —Å—Ç–∞—Ä–∏–π job, —è–∫—â–æ –±—É–≤
    if auto_scan_job:
        try:
            scheduler.remove_job(auto_scan_job.id)
        except Exception:
            pass
        auto_scan_job = None

    auto_scan_job = scheduler.add_job(auto_scan_tick, "interval", minutes=minutes, next_run_time=None)
    await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ—Å–∫–∞–Ω –≤–∫–ª—é—á—ë–Ω: –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω.")


async def cmd_auto_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_scan_job
    if auto_scan_job:
        try:
            scheduler.remove_job(auto_scan_job.id)
        except Exception:
            pass
        auto_scan_job = None
    await update.message.reply_text("‚õîÔ∏è –ê–≤—Ç–æ—Å–∫–∞–Ω –≤—ã–∫–ª—é—á–µ–Ω.")


# ------------ Main ------------
async def main():
    global app, scheduler, auto_scan_job

    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is required")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("signals", cmd_signals))
    app.add_handler(CommandHandler("trade_on", cmd_trade_on))
    app.add_handler(CommandHandler("trade_off", cmd_trade_off))
    app.add_handler(CommandHandler("set_size", cmd_set_size))
    app.add_handler(CommandHandler("set_lev", cmd_set_lev))
    app.add_handler(CommandHandler("set_risk", cmd_set_risk))
    app.add_handler(CommandHandler("auto_on", cmd_auto_on))
    app.add_handler(CommandHandler("auto_off", cmd_auto_off))

    # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    scheduler = AsyncIOScheduler(timezone="UTC")
    scheduler.start()

    # –ü—É–ª—å—Å (–¥–ª—è –ª–æ–≥—ñ–≤/–∂–∏–≤–æ—Å—Ç—ñ)
    scheduler.add_job(lambda: asyncio.create_task(heartbeat(None)), "interval", minutes=60)

    L.info("Starting bot‚Ä¶")
    await app.initialize()
    await app.start()
    # PTB v20: start polling
    await app.updater.start_polling()

    # –ù–µ –≤–∏—Ö–æ–¥–∏–º–æ
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
