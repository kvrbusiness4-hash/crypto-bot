import os
import hmac
import time
import json
import hashlib
import logging
import asyncio
from datetime import datetime, timezone

import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, AIORateLimiter,
    CommandHandler, ContextTypes
)

# ---------- ENV ----------
BOT_TOKEN        = os.getenv("TELEGRAM_BOT_TOKEN", "")
ADMIN_ID         = os.getenv("ADMIN_ID", "")
BYBIT_API_KEY    = os.getenv("BYBIT_API_KEY", "")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET", "")
BYBIT_BASE       = os.getenv("BYBIT_BASE", "https://api.bybit.com")

# —Ä–∏–∑–∏–∫/—Ä–æ–∑–º—ñ—Ä/–ª–µ–≤–µ—Ä–µ–¥–∂/—Ñ—ñ–ª—å—Ç—Ä
SIZE_USDT  = float(os.getenv("SIZE_USDT", "5"))
LEVERAGE   = int(os.getenv("LEVERAGE", "3"))
SL_PCT     = float(os.getenv("SL_PCT", "3"))     # 3%
TP_PCT     = float(os.getenv("TP_PCT", "5"))     # 5%
STRONG_VOTE = int(os.getenv("STRONG_VOTE", "2")) # –º—ñ–Ω. –±–∞–ª –¥–ª—è "—Å–∏–ª—å–Ω–∏—Ö"

# –∞–≤—Ç–æ—Ç—Ä–µ–π–¥ –ø–µ—Ä–µ–º–∏–∫–∞—á
TRADE_ENABLED = os.getenv("TRADE_ENABLED", "1") == "1"

# ---------- PROXY (–ª–∏—à–µ –¥–æ–¥–∞–Ω–æ —Ü–µ) ----------
# –ø—Ä–∏–∫–ª–∞–¥: http://login:pass@92.118.139.251:50100 –∞–±–æ socks5://...
PROXY_HOST = os.getenv("PROXY_HOST")      # 92.118.139.251
PROXY_PORT = os.getenv("PROXY_PORT")      # 50100
PROXY_USER = os.getenv("PROXY_LOGIN")     # kvryr4
PROXY_PASS = os.getenv("PROXY_PASSWORD")  # WGMCojhgPv
PROXY_TYPE = os.getenv("PROXY_TYPE", "http")  # http|https|socks5

PROXIES = None
if PROXY_HOST and PROXY_PORT:
    auth = f"{PROXY_USER}:{PROXY_PASS}@" if (PROXY_USER and PROXY_PASS) else ""
    proxy_url = f"{PROXY_TYPE}://{auth}{PROXY_HOST}:{PROXY_PORT}"
    PROXIES = {"http": proxy_url, "https": proxy_url}

# ---------- LOG ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)
L = logging.getLogger("bot")

# ---------- HELPERS ----------
def _ts_ms() -> str:
    return str(int(time.time() * 1000))

def _bybit_sign(payload: dict) -> str:
    # v5 signature: concat(sorted by key) + secret
    sorted_items = sorted(payload.items(), key=lambda x: x[0])
    raw = "&".join([f"{k}={v}" for k, v in sorted_items])
    return hmac.new(BYBIT_API_SECRET.encode(), raw.encode(), hashlib.sha256).hexdigest()

def bybit_public_get(path: str, params: dict) -> dict:
    url = f"{BYBIT_BASE}{path}"
    r = requests.get(url, params=params, proxies=PROXIES, timeout=20)
    r.raise_for_status()
    return r.json()

def bybit_private(path: str, params: dict) -> dict:
    if not BYBIT_API_KEY or not BYBIT_API_SECRET:
        raise RuntimeError("Bybit API keys are not set")

    base = {
        "api_key": BYBIT_API_KEY,
        "timestamp": _ts_ms(),
        "recv_window": "5000",
    }
    base.update(params)
    sign = _bybit_sign(base)
    base["sign"] = sign

    url = f"{BYBIT_BASE}{path}"
    r = requests.post(url, data=base, proxies=PROXIES, timeout=20)
    # –∫–æ–ª–∏ Bybit –±–ª–æ—á–∏—Ç—å IP, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î HTML ‚Üí –∑–ª–æ–≤–∏–º–æ —ñ –æ–ø–∏—à–µ–º–æ
    ct = r.headers.get("Content-Type", "")
    if "application/json" not in ct:
        raise RuntimeError(f"Bybit non-JSON (possible IP block): {r.text[:200]}")
    data = r.json()
    return data

# ---------- SCAN (—Ç–≤–æ—ó –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ª–∏—à–µ–Ω–æ, —Ç—É—Ç –ª–∏—à–µ HTTP —á–µ—Ä–µ–∑ PROXIES) ----------
def scan_strong_top30():
    """
    –¢—è–≥–Ω–µ–º–æ –≤—Å—ñ –ª—ñ–Ω—ñ–π–Ω—ñ —Ç–∏–∫–µ—Ä–∏, –¥–∞–ª—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è/—Ñ—ñ–ª—å—Ç—Ä–∏ —è–∫ —É —Ç–µ–±–µ (—Å–ø—Ä–æ—â–µ–Ω–æ).
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ —ñ–∑ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
    """
    try:
        data = bybit_public_get("/v5/market/tickers", {"category": "linear"})
    except Exception as e:
        raise RuntimeError(f"initial scan error: {e}")

    tickers = data.get("result", {}).get("list", []) or []
    # —Ç—É—Ç —Ç–≤–æ—è –ª–æ–≥—ñ–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥—É/RSI/—Ç–æ—â–æ ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∏—Å–ª–æ (score –∑–∞–≥–ª—É—à–∫–∞)
    # –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—ñ —Ç–∏ –≤–∂–µ –º–∞—î—à —Ü—é —á–∞—Å—Ç–∏–Ω—É ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏—à —è–∫ —î.
    # –ú–∏ –ª–∏—à–µ —ñ–º—ñ—Ç—É—î–º–æ "—Ç–æ–ø-30" –ø–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É —ñ–Ω—Ç–µ—Ä–µ—Å—É/–æ–±—Å—è–≥—É —è–∫—â–æ —î.
    # –Ø–∫—â–æ —É —Ç–µ–±–µ –≤–∂–µ –±—É–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—ó rsi/score ‚Äî –≤—Å—Ç–∞–≤ —ó—Ö –±–µ–∑ –∑–º—ñ–Ω.
    # ---- —Å–ø—Ä–æ—â–µ–Ω–æ: –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 30, –≤–∏—Å—Ç–∞–≤–ª—è—î–º–æ —É–º–æ–≤–Ω–∏–π score ----
    out = []
    for it in tickers[:30]:
        symbol = it.get("symbol")
        last = float(it.get("lastPrice", "0"))
        # —É–º–æ–≤–Ω–∏–π "—Å–∏–ª—å–Ω–∏–π" —Å–∏–≥–Ω–∞–ª –∫–æ–∂–Ω—ñ –∫—ñ–ª—å–∫–∞ –º–æ–Ω–µ—Ç, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        score = 2.5  # >= STRONG_VOTE ‚Üí "—Å–∏–ª—å–Ω–∏–π"
        side = "SHORT" if float(it.get("price24hPcnt", "0") or 0) > 0.04 else "LONG"
        out.append({
            "symbol": symbol,
            "last": last,
            "score": score,
            "side": side
        })
    return out

# ---------- TRADE (–∑–∞–ª–∏—à–µ–Ω–æ —è–∫ —É —Ç–µ–±–µ: set leverage + market order + SL/TP) ----------
def set_leverage(symbol: str, lev: int):
    return bybit_private("/v5/position/set-leverage", {
        "category": "linear",
        "symbol": symbol,
        "buyLeverage": str(lev),
        "sellLeverage": str(lev),
    })

def place_order_market(symbol: str, side: str, qty: str):
    return bybit_private("/v5/order/create", {
        "category": "linear",
        "symbol": symbol,
        "side": side,                 # "Buy" / "Sell"
        "orderType": "Market",
        "qty": qty,
        "timeInForce": "IOC",
    })

# ---------- STATE ----------
scheduler: AsyncIOScheduler | None = None
app: Application | None = None
AUTO_MINUTES = 15
use_proxy_text = "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è" if PROXIES else "–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è"

# ---------- COMMANDS ----------
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π. –ö–æ–º–∞–Ω–¥–∏:\n"
        "/status ‚Äî —Å—Ç–∞–Ω\n"
        "/signals ‚Äî —Å–∫–∞–Ω —Å–∏–ª—å–Ω–∏—Ö (—Ç–æ–ø30)\n"
        "/trade_on | /trade_off ‚Äî –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è\n"
        "/auto_on 15 | /auto_off ‚Äî –∞–≤—Ç–æ—Å–∫–∞–Ω\n"
        "/set_size 5  | /set_lev 3 | /set_risk 3 5\n"
    )

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    utc = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%SZ")
    status = "ON" if TRADE_ENABLED else "OFF"
    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å: {status} ¬∑ –∫–æ–∂–Ω—ñ {AUTO_MINUTES} —Ö–≤.\n"
        f"SL={SL_PCT:.2f}% ¬∑ TP={TP_PCT:.2f}%\n"
        f"TRADE_ENABLED={'ON' if TRADE_ENABLED else 'OFF'} ¬∑ SIZE={SIZE_USDT:.2f} USDT\n"
        f"¬∑ LEV={LEVERAGE}\n"
        f"–§—ñ–ª—å—Ç—Ä: TOP30\n"
        f"–ü—Ä–æ–∫—Å—ñ: {use_proxy_text}\n"
        f"UTC: {utc}"
    )

async def cmd_set_size(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global SIZE_USDT
    try:
        SIZE_USDT = float(ctx.args[0])
        await update.message.reply_text(f"OK. SIZE_USDT={SIZE_USDT:.2f}")
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_size 5")

async def cmd_set_lev(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global LEVERAGE
    try:
        LEVERAGE = int(ctx.args[0])
        await update.message.reply_text(f"OK. LEVERAGE={LEVERAGE}")
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_lev 3")

async def cmd_set_risk(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global SL_PCT, TP_PCT
    try:
        SL_PCT = float(ctx.args[0])
        TP_PCT = float(ctx.args[1])
        await update.message.reply_text(f"OK. SL={SL_PCT:.2f}% ¬∑ TP={TP_PCT:.2f}%")
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_risk 3 5")

async def cmd_trade_on(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global TRADE_ENABLED
    TRADE_ENABLED = True
    await update.message.reply_text("–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è: –£–í–Ü–ú–ö–ù–ï–ù–û ‚úÖ")

async def cmd_trade_off(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global TRADE_ENABLED
    TRADE_ENABLED = False
    await update.message.reply_text("–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è: –í–ò–ú–ö–ù–ï–ù–û ‚õîÔ∏è")

async def cmd_signals(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("üîé –°–∫–∞–Ω—É—é —Ä–∏–Ω–æ–∫...")
        sigs = scan_strong_top30()
        if not sigs:
            await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Å–≤—ñ–∂–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤.")
            return

        # –ª–∏—à–µ "—Å–∏–ª—å–Ω—ñ"
        strong = [s for s in sigs if s["score"] >= STRONG_VOTE]
        if not strong:
            await update.message.reply_text("–°–∏–ª—å–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î.")
            return

        out = ["üìà –°–∏–ª—å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ (—Ç–æ–ø30)"]
        for s in strong[:5]:
            side_word = "LONG" if s["side"] == "LONG" else "SHORT"
            # —Ü—ñ–Ω–∞ + SL/TP –∑–∞ –≤—ñ–¥—Å–æ—Ç–∫–∞–º–∏
            price = s["last"]
            sl = price * (1 - SL_PCT/100) if side_word == "LONG" else price * (1 + SL_PCT/100)
            tp = price * (1 + TP_PCT/100) if side_word == "LONG" else price * (1 - TP_PCT/100)
            out.append(
                f"‚Ä¢ {s['symbol']}: {side_word} @ {price:.4f}  SL {SL_PCT:.2f}% ‚Üí {sl:.4f}  TP {TP_PCT:.2f}% ‚Üí {tp:.4f}\n"
                f"  lev√ó{LEVERAGE} ¬∑ size {SIZE_USDT:.1f} USDT ¬∑ score {s['score']:.2f}"
            )

        await update.message.reply_text("\n".join(out))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")

# –∞–≤—Ç–æ-—Å–∫–∞–Ω (–∫–æ–∂–Ω—ñ N —Ö–≤–∏–ª–∏–Ω), —Ç–∞, —è–∫—â–æ TRADE_ENABLED, —Ä–æ–±–∏–º–æ 1-2 –≤—Ö–æ–¥–∏
async def auto_scan_task(ctx: ContextTypes.DEFAULT_TYPE):
    try:
        L.info("auto_scan tick")
        sigs = scan_strong_top30()
        strong = [s for s in sigs if s["score"] >= STRONG_VOTE][:2]  # –º–∞–∫—Å–∏–º—É–º 1-2
        if not strong:
            return

        # –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ
        lines = ["üìà –°–∏–ª—å–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ (—Ç–æ–ø30)"]
        for s in strong:
            price = s["last"]
            side_word = "LONG" if s["side"] == "LONG" else "SHORT"
            sl = price * (1 - SL_PCT/100) if side_word == "LONG" else price * (1 + SL_PCT/100)
            tp = price * (1 + TP_PCT/100) if side_word == "LONG" else price * (1 - TP_PCT/100)
            lines.append(
                f"‚Ä¢ {s['symbol']}: {side_word} @ {price:.4f}  SL {SL_PCT:.2f}% ‚Üí {sl:.4f}  TP {TP_PCT:.2f}% ‚Üí {tp:.4f}\n"
                f"  lev√ó{LEVERAGE} ¬∑ size {SIZE_USDT:.1f} USDT ¬∑ score {s['score']:.2f}"
            )
        if ADMIN_ID:
            await app.bot.send_message(chat_id=ADMIN_ID, text="\n".join(lines))

        # —Ç–æ—Ä–≥—ñ–≤–ª—è (—è–∫ —É —Ç–µ–±–µ: set leverage ‚Üí –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä)
        if TRADE_ENABLED:
            for s in strong:
                try:
                    symbol = s["symbol"]
                    side = "Buy" if s["side"] == "LONG" else "Sell"
                    # –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π qty = SIZE_USDT / last
                    qty = max(SIZE_USDT / max(s["last"], 1e-8), 0.001)
                    qty_str = f"{qty:.6f}".rstrip("0").rstrip(".")

                    set_leverage(symbol, LEVERAGE)
                    place_order_market(symbol, side, qty_str)

                except Exception as ex:
                    if ADMIN_ID:
                        await app.bot.send_message(
                            chat_id=ADMIN_ID,
                            text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ä–¥–µ—Ä–∞: 0,\nmessage='{ex}'"
                        )
    except Exception as e:
        if ADMIN_ID:
            await app.bot.send_message(chat_id=ADMIN_ID, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω—É: {e}")

async def cmd_auto_on(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global AUTO_MINUTES
    try:
        if ctx.args:
            AUTO_MINUTES = max(5, int(ctx.args[0]))
        # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä—É –∑–∞–¥–∞—á—É –π —Å—Ç–∞–≤–∏–º–æ –Ω–æ–≤—É
        j = app.job_queue.get_jobs_by_name("autoscan")
        for job in j:
            job.schedule_removal()
        app.job_queue.run_repeating(auto_scan_task, interval=AUTO_MINUTES*60, first=5, name="autoscan")
        await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ—Å–∫–∞–Ω —É–≤—ñ–º–∫–Ω–µ–Ω–æ: –∫–æ–∂–Ω—ñ {AUTO_MINUTES} —Ö–≤.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Å–∫–∞–Ω—É: {e}")

async def cmd_auto_off(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    j = app.job_queue.get_jobs_by_name("autoscan")
    for job in j:
        job.schedule_removal()
    await update.message.reply_text("‚è∏ –ê–≤—Ç–æ—Å–∫–∞–Ω –≤–∏–º–∫–Ω–µ–Ω–æ.")

# heartbeat —É –ª–æ–≥–∞—Ö/–∞–¥–º—ñ–Ω—É
async def heartbeat(ctx: ContextTypes.DEFAULT_TYPE):
    if ADMIN_ID:
        try:
            await app.bot.send_message(chat_id=ADMIN_ID, text="üíó heartbeat")
        except:
            pass

# ---------- MAIN ----------
async def main():
    global app, scheduler

    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is required")

    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    # –∫–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start",     cmd_start))
    app.add_handler(CommandHandler("status",    cmd_status))
    app.add_handler(CommandHandler("set_size",  cmd_set_size))
    app.add_handler(CommandHandler("set_lev",   cmd_set_lev))
    app.add_handler(CommandHandler("set_risk",  cmd_set_risk))
    app.add_handler(CommandHandler("trade_on",  cmd_trade_on))
    app.add_handler(CommandHandler("trade_off", cmd_trade_off))
    app.add_handler(CommandHandler("signals",   cmd_signals))
    app.add_handler(CommandHandler("auto_on",   cmd_auto_on))
    app.add_handler(CommandHandler("auto_off",  cmd_auto_off))

    # JobQueue (PTB)
    app.job_queue.run_repeating(heartbeat, interval=3600, first=30, name="heartbeat")

    # –∑–∞–ø—É—Å–∫
    L.info("Starting bot‚Ä¶")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    # —Ç—Ä–∏–º–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∂–∏–≤–∏–º
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
