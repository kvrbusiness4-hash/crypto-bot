# -*- coding: utf-8 -*-
"""
bot_alpaca.py ‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑:
- Telegram-–±–æ—Ç (python-telegram-bot v20+)
- —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è Alpaca (Data API + Trading API)
- –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –æ—Ä–¥–µ—Ä—ñ–≤ (—Ä–∏–Ω–∫–æ–≤–∏—Ö) –∑ TP/SL —É STATE
- –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ TP/SL —É —Ñ–æ–Ω—ñ + –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è OPEN/CLOSE
- —Å—Ç–∞—Ç—É—Å-–∫–æ–º–∞–Ω–¥–∏ —ñ –¥–µ–º–æ-—Å–∫–∞–Ω–µ—Ä

ENV:
  TELEGRAM_BOT_TOKEN
  ALPACA_API_KEY
  ALPACA_API_SECRET
  ALPACA_BASE_URL         (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://paper-api.alpaca.markets)
  ALPACA_DATA_URL         (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://data-api.alpaca.markets)
  MODE                    (scalp/aggressive/safe) ‚Äî –æ–ø—Ü—ñ–π–Ω–æ
  SCAN_INTERVAL_SEC       (–æ–ø—Ü—ñ–π–Ω–æ, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 300)
  TP_PCT                  (0.008 => 0.8%) ‚Äì –¥–µ—Ñ–æ–ª—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
  SL_PCT                  (0.015 => 1.5%) ‚Äì –¥–µ—Ñ–æ–ª—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
"""
import os
import asyncio
import math
import json
from typing import Dict, Any, Optional, Tuple

import aiohttp
from aiohttp import ClientSession, ClientTimeout

from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, ContextTypes
)

# ================== ENV ==================
TG_TOKEN = (os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TG_TOKEN") or "").strip()

ALPACA_API_KEY   = (os.getenv("ALPACA_API_KEY") or "").strip()
ALPACA_API_SECRET= (os.getenv("ALPACA_API_SECRET") or "").strip()

ALPACA_BASE_URL  = (os.getenv("ALPACA_BASE_URL")  or "https://paper-api.alpaca.markets").rstrip("/")
ALPACA_DATA_URL  = (os.getenv("ALPACA_DATA_URL")  or "https://data-api.alpaca.markets").rstrip("/")

SCAN_INTERVAL_SEC= int(os.getenv("SCAN_INTERVAL_SEC") or 300)

TP_PCT_DEFAULT   = float(os.getenv("TP_PCT") or 0.008)   # +0.8%
SL_PCT_DEFAULT   = float(os.getenv("SL_PCT") or 0.015)   # -1.5%

# ================== GLOBALS ==================
TIMEOUT = ClientTimeout(total=30)
HTTP: Optional[ClientSession] = None

STATE: Dict[int, Dict[str, Any]] = {}  # STATE[chat_id] = {"positions": {symbol: {...}}, "mode": "scalp", ...}

# –¥–µ–º–æ-—Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–∏ (—Å–∏–º–≤–æ–ª–∏ Alpaca)
CRYPTO_LIST = ["AAVE/USD", "AVAX/USD", "BAT/USD"]

# ================== HELPERS ==================
def ensure_chat_state(chat_id: int) -> Dict[str, Any]:
    st = STATE.setdefault(chat_id, {})
    st.setdefault("positions", {})
    st.setdefault("mode", "scalp")
    return st

def fmt_pct(x: float) -> str:
    return f"{x*100:.2f}%"

def fmt_price(p: float) -> str:
    if p >= 100:
        return f"{p:.4f}"
    elif p >= 1:
        return f"{p:.5f}"
    else:
        return f"{p:.8f}"

def symbol_is_crypto(sym: str) -> bool:
    return "/" in sym

def alpaca_auth_headers() -> Dict[str, str]:
    return {
        "APCA-API-KEY-ID": ALPACA_API_KEY,
        "APCA-API-SECRET-KEY": ALPACA_API_SECRET,
        "Content-Type": "application/json",
    }

async def alpaca_get(url: str, params: Optional[dict] = None) -> Any:
    async with HTTP.get(url, headers=alpaca_auth_headers(), params=params) as r:
        if r.status >= 400:
            raise RuntimeError(f"Alpaca GET {url} {r.status}: {await r.text()}")
        return await r.json()

async def alpaca_post(url: str, payload: dict) -> Any:
    async with HTTP.post(url, headers=alpaca_auth_headers(), data=json.dumps(payload)) as r:
        txt = await r.text()
        if r.status >= 400:
            raise RuntimeError(f"Alpaca POST {url} {r.status}: {txt}")
        try:
            return json.loads(txt)
        except Exception:
            return txt

# ---- quotes/last trade ----
async def get_last_price(symbol: str) -> float:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—é —Ü—ñ–Ω—É (close) —á–µ—Ä–µ–∑ Alpaca Data API (stocks –∞–±–æ crypto)."""
    if symbol_is_crypto(symbol):
        # data v1beta3 crypto/us/{symbol}/quotes/latest
        # –ê–ª–µ –Ω–∞ paper —á–∞—Å—Ç–æ –∑—Ä—É—á–Ω—ñ—à–µ –±—Ä–∞—Ç–∏ last trade:
        # /v1beta3/crypto/us/trades/latest?symbols=AAVE/USD
        url = f"{ALPACA_DATA_URL}/v1beta3/crypto/us/trades/latest"
        data = await alpaca_get(url, params={"symbols": symbol})
        # {'trades': {'AAVE/USD': {'p': 310.1, ...}}}
        price = float(data["trades"][symbol]["p"])
        return price
    else:
        # stocks: /v2/stocks/{symbol}/trades/latest
        url = f"{ALPACA_DATA_URL}/v2/stocks/{symbol}/trades/latest"
        data = await alpaca_get(url)
        price = float(data["trade"]["p"])
        return price

# ================== TELEGRAM NOTIFY ==================
async def notify_open(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, symbol: str, side: str,
                      entry_price: float, tp_price: float, sl_price: float,
                      tp_pct: float, sl_pct: float, qty: float):
    msg = (f"üü¢ ORDER OK: {symbol} {side.upper()} ${qty:.2f}\n"
           f"–í—Ö—ñ–¥ @ {fmt_price(entry_price)} ¬∑ "
           f"TP {fmt_price(tp_price)} (+{fmt_pct(tp_pct)}) ¬∑ "
           f"SL {fmt_price(sl_price)} (-{fmt_pct(sl_pct)})")
    await ctx.bot.send_message(chat_id, msg)

async def notify_close(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, symbol: str, side: str,
                       entry_price: float, exit_price: float, reason: str):
    if side.lower() == "long":
        pnl_pct = (exit_price / entry_price - 1.0) * 100.0
    else:
        pnl_pct = (entry_price / exit_price - 1.0) * 100.0
    msg = (f"üî¥ CLOSE ORDER: {symbol} {side.upper()}\n"
           f"–í–∏—Ö—ñ–¥ @ {fmt_price(exit_price)} ¬∑ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
           f"PnL: {pnl_pct:.2f}% (–≤—Ö—ñ–¥ {fmt_price(entry_price)})")
    await ctx.bot.send_message(chat_id, msg)

# ================== TRADING ==================
async def place_market_order(symbol: str, notional_usd: float, side: str) -> Tuple[str, float, float]:
    """
    –†–∏–Ω–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä —É –¥–æ–ª–∞—Ä–æ–≤–æ–º—É –Ω–æ—Ç—ñ–æ–Ω–∞–ª—ñ.
    –í–µ—Ä—Ç–∞—î: (order_id, filled_qty, avg_fill_price)
    –ù–∞ paper —Ä–∏–Ω–æ–∫ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –º–∏—Ç—Ç—î–≤–æ —è–∫ –ø—Ä–∞–≤–∏–ª–æ.
    """
    url = f"{ALPACA_BASE_URL}/v2/orders"
    payload = {
        "symbol": symbol.replace("/", ""),  # –¥–ª—è crypto —É trading api ‚Äî –±–µ–∑ —Å–ª–µ—à–∞? (—É –ø–∞–ø–µ—Ä—ñ —á–∞—Å—Ç–æ —ñ–∑ —Å–ª–µ—à–µ–º –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω–æ)
        "notional": round(notional_usd, 2),
        "side": "buy" if side.lower() in ("buy", "long") else "sell",
        "type": "market",
        "time_in_force": "gtc",
        "asset_class": "crypto" if symbol_is_crypto(symbol) else "us_equity",
    }
    # –î–ª—è crypto paper trading –Ω–∞ Alpaca –∑–∞–∑–≤–∏—á–∞–π symbol —è–∫ "AAVEUSD" (–±–µ–∑ "/")
    if symbol_is_crypto(symbol):
        payload["symbol"] = symbol.replace("/", "")

    data = await alpaca_post(url, payload)
    oid = data.get("id", "")
    filled_qty = float(data.get("filled_qty") or 0.0) if data.get("filled_qty") else 0.0
    avg_price = float(data.get("filled_avg_price") or 0.0) if data.get("filled_avg_price") else 0.0

    # –Ø–∫—â–æ —â–µ –Ω–µ filled, –ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –æ—Ä–¥–µ—Ä
    if avg_price <= 0.0:
        # –ø–æ—á–µ–∫–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫–æ –π –∑–∞–ø—Ä–æ—Å–∏–º–æ
        await asyncio.sleep(0.7)
        url_o = f"{ALPACA_BASE_URL}/v2/orders/{oid}"
        od = await alpaca_get(url_o)
        filled_qty = float(od.get("filled_qty") or 0.0) if od.get("filled_qty") else 0.0
        avg_price = float(od.get("filled_avg_price") or 0.0) if od.get("filled_avg_price") else 0.0

    # –§–æ–ª–±–µ–∫ –Ω–∞ last price
    if avg_price <= 0.0:
        avg_price = await get_last_price(symbol)

    return oid, filled_qty, avg_price

async def close_position_market(symbol: str, qty: float, side: str) -> Tuple[str, float]:
    """
    –ó–∞–∫—Ä–∏—Ç—Ç—è: —è–∫—â–æ –≤—ñ–¥–∫—Ä–∏–≤–∞–ª–∏ long (buy), —Ç–æ —Ç—É—Ç sell qty; —è–∫—â–æ short ‚Äî buy qty.
    –ü–æ–≤–µ—Ä—Ç–∞—î (order_id, exit_price_approx).
    """
    exit_side = "sell" if side.lower() == "long" else "buy"
    notional = 0.0  # –º–æ–∂–Ω–∞ –ø—É—Å—Ç–∏—Ç–∏ –ø–æ qty; –¥–ª—è crypto ‚Äî –∫—Ä–∞—â–µ qty
    url = f"{ALPACA_BASE_URL}/v2/orders"
    payload = {
        "symbol": symbol.replace("/", ""),
        "qty": str(qty),
        "side": exit_side,
        "type": "market",
        "time_in_force": "gtc",
        "asset_class": "crypto" if symbol_is_crypto(symbol) else "us_equity",
    }
    if symbol_is_crypto(symbol):
        payload["symbol"] = symbol.replace("/", "")

    data = await alpaca_post(url, payload)
    oid = data.get("id", "")
    avg_exit = float(data.get("filled_avg_price") or 0.0) if data.get("filled_avg_price") else 0.0
    if avg_exit <= 0.0:
        await asyncio.sleep(0.7)
        od = await alpaca_get(f"{ALPACA_BASE_URL}/v2/orders/{oid}")
        avg_exit = float(od.get("filled_avg_price") or 0.0) if od.get("filled_avg_price") else 0.0
    if avg_exit <= 0.0:
        avg_exit = await get_last_price(symbol)
    return oid, avg_exit

# ================== POSITION STATE ==================
async def open_position(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, symbol: str,
                        side: str, notional_usd: float,
                        tp_pct: float = TP_PCT_DEFAULT,
                        sl_pct: float = SL_PCT_DEFAULT):
    """
    –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é: MARKET notional, –∑–±–µ—Ä–µ–≥—Ç–∏ entry/TP/SL —É STATE —ñ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏.
    """
    try:
        oid, filled_qty, entry_price = await place_market_order(symbol, notional_usd, side)
    except Exception as e:
        await ctx.bot.send_message(chat_id, f"üî¥ ORDER FAIL {symbol}: {e}")
        return

    is_long = side.lower() in ("buy", "long")
    if is_long:
        tp_price = entry_price * (1.0 + tp_pct)
        sl_price = entry_price * (1.0 - sl_pct)
    else:
        tp_price = entry_price * (1.0 - tp_pct)
        sl_price = entry_price * (1.0 + sl_pct)

    st = ensure_chat_state(chat_id)
    st["positions"][symbol] = {
        "side": "long" if is_long else "short",
        "entry": float(entry_price),
        "tp": float(tp_price),
        "sl": float(sl_price),
        "tp_pct": float(tp_pct),
        "sl_pct": float(sl_pct),
        "qty": float(filled_qty) if filled_qty > 0 else round(notional_usd / max(entry_price, 1e-9), 6),
        "order_id": oid,
    }

    await notify_open(ctx, chat_id, symbol, "buy" if is_long else "sell",
                      entry_price, tp_price, sl_price, tp_pct, sl_pct,
                      st["positions"][symbol]["qty"])

async def maybe_close_on_target(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, symbol: str):
    """
    –Ø–∫—â–æ —Ü—ñ–Ω–∞ –¥—ñ–π—à–ª–∞ –¥–æ TP/SL ‚Äî –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —ñ —à–ª–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    st = ensure_chat_state(chat_id)
    pos = st["positions"].get(symbol)
    if not pos:
        return
    side   = pos["side"]
    entry  = pos["entry"]
    tp     = pos["tp"]
    sl     = pos["sl"]
    qty    = pos["qty"]

    try:
        price = await get_last_price(symbol)
    except Exception:
        return

    reason = None
    if side == "long":
        if price >= tp:
            reason = "TP"
        elif price <= sl:
            reason = "SL"
    else:
        if price <= tp:
            reason = "TP"
        elif price >= sl:
            reason = "SL"

    if reason:
        try:
            _, exit_price = await close_position_market(symbol, qty, side)
        except Exception:
            # fallback ‚Äî –±–µ—Ä–µ–º–æ —Å–ø–æ—Ç–æ–≤—É
            exit_price = price

        await notify_close(ctx, chat_id, symbol, side, entry, exit_price, reason)
        # —á–∏—Å—Ç–∏–º–æ
        st["positions"].pop(symbol, None)

# ================== BACKGROUND SCANNER ==================
async def scanner_loop(app: Application):
    """
    –ü—Ä–∏–º—ñ—Ç–∏–≤–Ω–∏–π —Ñ–æ–Ω–æ–≤–∏–π —Ü–∏–∫–ª:
      - –ø—Ä–æ–±—ñ–≥–∞—î –ø–æ —á–∞—Ç–∞—Ö, –ø–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î TP/SL
      - –¥–ª—è –¥–µ–º–æ: –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é /signals_crypto –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ open_position
    """
    await asyncio.sleep(3)
    while True:
        try:
            for chat_id, st in list(STATE.items()):
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TP/SL –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
                syms = list(st.get("positions", {}).keys())
                for s in syms:
                    try:
                        await maybe_close_on_target(app.bot, chat_id, s)
                    except Exception:
                        pass
        except Exception:
            pass
        await asyncio.sleep(5)  # —á–∞—Å—Ç–∏–π –º–æ–Ω—ñ—Ç–æ—Ä

# ================== TELEGRAM COMMANDS ==================
MAIN_KB = ReplyKeyboardMarkup(
    [
        ["/signals_crypto", "/alp_status"],
        ["/auto_on", "/auto_off"],
    ],
    resize_keyboard=True
)

async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ensure_chat_state(chat_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–æ—Ç–æ–≤–∏–π üöÄ\n"
        "‚Ä¢ /signals_crypto ‚Äî –¥–µ–º–æ-—Å–∫–∞–Ω–µ—Ä (–≤—ñ–¥–∫—Ä–∏—î 3 –ø–æ–∑–∏—Ü—ñ—ó –ø–æ $200)\n"
        "‚Ä¢ /alp_status ‚Äî —Å—Ç–∞—Ç—É—Å —ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó\n"
        "‚Ä¢ /auto_on, /auto_off ‚Äî —Ñ–æ–Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä TP/SL\n",
        reply_markup=MAIN_KB
    )

async def alp_status_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = ensure_chat_state(chat_id)
    lines = [f"Mode={st.get('mode')}"]
    pos = st["positions"]
    if pos:
        lines.append("üìå –í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó:")
        for sym, p in pos.items():
            lines.append(f"‚Ä¢ {sym} {p['side'].upper()}: "
                         f"entry {fmt_price(p['entry'])} ¬∑ "
                         f"TP {fmt_price(p['tp'])} (+{fmt_pct(p['tp_pct'])}) ¬∑ "
                         f"SL {fmt_price(p['sl'])} (-{fmt_pct(p['sl_pct'])}) ¬∑ "
                         f"qty {p['qty']}")
    else:
        lines.append("–í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –Ω–µ–º–∞—î.")
    await update.message.reply_text("\n".join(lines))

async def signals_crypto_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –î–µ–º–æ: –≤—ñ–¥–∫—Ä–∏–≤–∞—î 3 –ø–æ–∑–∏—Ü—ñ—ó –ø–æ $200 –∑–∞ —Å–ø–∏—Å–∫–æ–º CRYPTO_LIST.
    """
    chat_id = update.effective_chat.id
    st = ensure_chat_state(chat_id)
    await update.message.reply_text(
        "üõ∞Ô∏è –°–∫–∞–Ω–µ—Ä (–∫—Ä–∏–ø—Ç–∞): –≤—ñ–¥–∫—Ä–∏—î–º–æ –ø–æ $200 –¥–ª—è –ø–µ—Ä—à–∏—Ö 3 —Å–∏–º–≤–æ–ª—ñ–≤",
    )
    # –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥—É–±–ª—å, —è–∫—â–æ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ
    limit = 3
    opened = 0
    for sym in CRYPTO_LIST:
        if opened >= limit:
            break
        if sym in st["positions"]:
            await update.message.reply_text(f"‚óªÔ∏è SKIP (–ø–æ–∑–∏—Ü—ñ—è –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞): {sym}")
            continue
        try:
            await open_position(ctx, chat_id, sym, "long", 200.0, TP_PCT_DEFAULT, SL_PCT_DEFAULT)
            opened += 1
        except Exception as e:
            await update.message.reply_text(f"üî¥ ORDER FAIL {sym}: {e}")

async def auto_on_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = ensure_chat_state(update.effective_chat.id)
    st["auto"] = True
    await update.message.reply_text("‚úÖ AUTO-SCAN: ON (–º–æ–Ω—ñ—Ç–æ—Ä TP/SL –∫–æ–∂–Ω—ñ ~5—Å)")

async def auto_off_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    st = ensure_chat_state(update.effective_chat.id)
    st["auto"] = False
    await update.message.reply_text("‚õî AUTO-SCAN: OFF")

# ================== MAIN ==================
async def main():
    global HTTP
    HTTP = aiohttp.ClientSession(timeout=TIMEOUT)

    app = Application.builder().token(TG_TOKEN).build()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("alp_status", alp_status_cmd))
    app.add_handler(CommandHandler("signals_crypto", signals_crypto_cmd))
    app.add_handler(CommandHandler("auto_on", auto_on_cmd))
    app.add_handler(CommandHandler("auto_off", auto_off_cmd))

    # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä—É
    app.job_queue.run_repeating(lambda *_: None, interval=3600, first=0)  # ¬´—è–∫–æ—Ä¬ª –¥–ª—è JobQueue
    asyncio.create_task(scanner_loop(app))

    print("Bot started.")
    try:
        await app.run_polling(close_loop=False)
    finally:
        await HTTP.close()

if __name__ == "__main__":
    asyncio.run(main())
