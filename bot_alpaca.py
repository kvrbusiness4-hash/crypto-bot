# bot_alpaca.py
# -*- coding: utf-8 -*-

import os
import asyncio
import json
from typing import Dict, Any, Tuple, List

import aiohttp
from aiohttp import ClientSession, ClientTimeout

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# =========================
# ENV
# =========================
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip() or os.getenv("TELEGRAM_TOKEN", "").strip()

ALPACA_API_KEY = os.getenv("ALPACA_API_KEY", "").strip()
ALPACA_API_SECRET = os.getenv("ALPACA_API_SECRET", "").strip()
# –ë–ê–ó–û–í–ò–ô endpoint –ë–ï–ó –∑–∞–π–≤–∏—Ö /v2 —É –∫—ñ–Ω—Ü—ñ
ALPACA_BASE_URL = (os.getenv("ALPACA_BASE_URL", "https://paper-api.alpaca.markets").rstrip("/"))
ALPACA_DATA_URL = (os.getenv("ALPACA_DATA_URL", "https://data.alpaca.markets").rstrip("/"))

ALPACA_NOTIONAL = float(os.getenv("ALPACA_NOTIONAL", "50") or 50)  # —Å—É–º–∞ –Ω–∞ –æ—Ä–¥–µ—Ä
SCAN_EVERY_SEC = int(os.getenv("SCAN_EVERY_SEC", "120") or 120)

# –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —É —Å–∏–≥–Ω–∞–ª—ñ (–¥–ª—è –±–µ–∑–ø–µ–∫–∏)
ALPACA_MAX_STOCKS = int(os.getenv("ALPACA_MAX_STOCKS", "300") or 300)
ALPACA_MAX_CRYPTO = int(os.getenv("ALPACA_MAX_CRYPTO", "50") or 50)

SIGLOG_PATH = os.getenv("SIGLOG_PATH", "signals_log.csv")

# =========================
# –°–¢–ê–ù –ù–ê –ß–ê–¢
# =========================
def default_state() -> Dict[str, Any]:
    return {
        "autotrade": False,
        "mode": "default",         # –ø—Ä–æ—Ñ—ñ–ª—å —Ä–∏–∑–∏–∫—É (–ø–æ–∫–∏ —â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)
        "last_scan_txt": "",
    }

STATE: Dict[int, Dict[str, Any]] = {}

def stedef(chat_id: int) -> Dict[str, Any]:
    return STATE.setdefault(chat_id, default_state())

# =========================
# –ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–Ü –ö–ù–û–ü–ö–ò
# =========================
def main_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        ["/aggressive", "/scalp", "/default"],
        ["/swing", "/safe", "/help"],
        ["/signals_alpaca"],
        ["/alp_on", "/alp_status", "/alp_off"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# =========================
# HTTP / Alpaca helpers
# =========================
def alp_headers() -> Dict[str, str]:
    return {
        "APCA-API-KEY-ID": ALPACA_API_KEY,
        "APCA-API-SECRET-KEY": ALPACA_API_SECRET,
        "Content-Type": "application/json",
    }

def alp_url(path: str) -> str:
    # —É—Å—ñ —Ç—Ä–µ–π–¥-–µ–Ω–¥–ø–æ—ó–Ω—Ç–∏ ‚Äî –ø—ñ–¥ /v2
    path = path.lstrip("/")
    return f"{ALPACA_BASE_URL}/v2/{path}"

async def alp_get(session: ClientSession, path: str) -> Any:
    async with session.get(alp_url(path), headers=alp_headers(), timeout=ClientTimeout(total=30)) as r:
        if r.status >= 400:
            txt = await r.text()
            raise RuntimeError(f"Alpaca GET {r.url} {r.status}: {txt}")
        return await r.json()

async def alp_post(session: ClientSession, path: str, payload: Dict[str, Any]) -> Any:
    async with session.post(alp_url(path), headers=alp_headers(),
                            data=json.dumps(payload),
                            timeout=ClientTimeout(total=30)) as r:
        if r.status >= 400:
            txt = await r.text()
            raise RuntimeError(f"Alpaca POST {r.url} {r.status}: {txt}")
        return await r.json()

async def alp_account() -> Dict[str, Any]:
    timeout = ClientTimeout(total=30)
    async with ClientSession(timeout=timeout) as s:
        return await alp_get(s, "account")

async def place_notional_order(symbol: str, side: str, notional: float) -> Dict[str, Any]:
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ—Ä–¥–µ—Ä —É –¥–æ–ª–∞—Ä–æ–≤—ñ–π —Å—É–º—ñ (USD). –ü—Ä–∞—Ü—é—î —ñ –¥–ª—è –∞–∫—Ü—ñ–π, —ñ –¥–ª—è crypto (24/7).
    –î–ª—è –∫—Ä–∏–ø—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∏–º–≤–æ–ª–∏ –≤–∏–¥—É 'BTC/USD', 'ETH/USD'.
    –î–ª—è –∞–∫—Ü—ñ–π ‚Äî –∑–≤–∏—á–∞–π–Ω—ñ —Ç—ñ–∫–µ—Ä–∏ 'AAPL', 'TSLA' —ñ —Ç.–¥.
    """
    payload = {
        "symbol": symbol,
        "side": side,                   # "buy" | "sell"
        "type": "market",
        "time_in_force": "gtc",
        "notional": str(float(notional)),
    }
    timeout = ClientTimeout(total=30)
    async with ClientSession(timeout=timeout) as s:
        return await alp_post(s, "orders", payload)

# =========================
# –°–ö–ê–ù–ï–† (–¥–µ–º–æ)
# =========================
async def scan_all(st: Dict[str, Any]) -> Tuple[str, List[str], List[str]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î:
      - —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç,
      - —Å–ø–∏—Å–∫–∏ picks_s (stocks) —ñ picks_c (crypto)
    –¢—É—Ç –¥–µ–º–æ-—Å–∫–∞–Ω–µ—Ä: —â–æ–± –Ω—ñ—á–æ–≥–æ –Ω–µ –ª–∞–º–∞—Ç–∏ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏.
    –ú–æ–∂–µ—à –≤—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤–æ—é –ª–æ–≥—ñ–∫—É: –≤—ñ–¥–±—ñ—Ä –∑–∞ –æ–±'—î–º–æ–º, —Ç—Ä–µ–Ω–¥–æ–º, –π —Ç.–¥.
    """
    # TODO: –¥–æ–¥–∞–π —Ä–µ–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
    rep_lines = ["üõ∞ –°–∫–∞–Ω–µ—Ä: –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤."]
    report = "\n".join(rep_lines)
    picks_s: List[str] = []  # –ø—Ä–∏–∫–ª–∞–¥: ["AAPL", "TSLA"]
    picks_c: List[str] = []  # –ø—Ä–∏–∫–ª–∞–¥: ["BTC/USD", "ETH/USD"]
    return report, picks_s, picks_c

# =========================
# –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê
# =========================
async def start_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    txt = (
        "üëã –ì–æ—Ç–æ–≤–æ. –ë–æ—Ç –≤–∏–¥–∞—î —Å–∏–≥–Ω–∞–ª–∏ —Ç–∞ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º) —Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä–∏ –≤ **Alpaca**.\n"
        "‚Ä¢ /alp_on ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥\n"
        "‚Ä¢ /alp_off ‚Äî –≤–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥\n"
        "‚Ä¢ /alp_status ‚Äî —Å—Ç–∞–Ω –∞–∫–∞—É–Ω—Ç—É\n"
        "‚Ä¢ /signals_alpaca ‚Äî —Ä—É—á–Ω–∏–π —Å–∫–∞–Ω –∑–∞—Ä–∞–∑\n\n"
        "–ö—Ä–∏–ø—Ç–∞ —Ç–æ—Ä–≥—É—î—Ç—å—Å—è 24/7. –ë–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–µ—Å—ñ—ó."
    )
    await u.message.reply_text(txt, parse_mode=ParseMode.MARKDOWN, reply_markup=main_keyboard())

async def aggressive_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    st["mode"] = "aggressive"
    await u.message.reply_text("‚úÖ Mode: AGGRESSIVE", reply_markup=main_keyboard())

async def scalp_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    st["mode"] = "scalp"
    await u.message.reply_text("‚úÖ Mode: SCALP", reply_markup=main_keyboard())

async def default_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    st["mode"] = "default"
    await u.message.reply_text("‚úÖ Mode: DEFAULT", reply_markup=main_keyboard())

async def swing_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    st["mode"] = "swing"
    await u.message.reply_text("‚úÖ Mode: SWING", reply_markup=main_keyboard())

async def safe_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    st["mode"] = "safe"
    await u.message.reply_text("‚úÖ Mode: SAFE", reply_markup=main_keyboard())

async def alp_on_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    st["autotrade"] = True
    await u.message.reply_text("‚úÖ Alpaca AUTOTRADE: ON", reply_markup=main_keyboard())

async def alp_off_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    st["autotrade"] = False
    await u.message.reply_text("‚èπ Alpaca AUTOTRADE: OFF", reply_markup=main_keyboard())

async def alp_status_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        acc = await alp_account()
        txt = (
            "üíº Alpaca:\n"
            f"‚Ä¢ status={acc.get('status','?')}\n"
            f"‚Ä¢ cash=${float(acc.get('cash',0)):,.2f}\n"
            f"‚Ä¢ buying_power=${float(acc.get('buying_power',0)):,.2f}\n"
            f"‚Ä¢ equity=${float(acc.get('equity',0)):,.2f}"
        )
    except Exception as e:
        txt = f"‚ùå Alpaca error: {e}"
    await u.message.reply_text(txt, reply_markup=main_keyboard())

async def signals_alpaca_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    rep, picks_s, picks_c = await scan_all(st)
    st["last_scan_txt"] = rep

    # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑–≤—ñ—Ç (—Ä–æ–∑–±–∏–≤–∞—î–º–æ, —è–∫—â–æ –¥–æ–≤–≥–∏–π)
    chunks = [rep[i:i+3500] for i in range(0, len(rep), 3500)] or [rep]
    for ch in chunks:
        await u.message.reply_text(ch, parse_mode=ParseMode.MARKDOWN)

    # –∞–≤—Ç–æ—Ç—Ä–µ–π–¥
    if st.get("autotrade"):
        try:
            # –ø—Ä–∏–∫–ª–∞–¥: –∫—É–ø–∏—Ç–∏ –∫–æ–∂–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ ALPACA_NOTIONAL
            for sym in (picks_s[:ALPACA_MAX_STOCKS] + picks_c[:ALPACA_MAX_CRYPTO]):
                try:
                    r = await place_notional_order(sym, "buy", ALPACA_NOTIONAL)
                    await u.message.reply_text(f"üü¢ ORDER OK: {sym} ${ALPACA_NOTIONAL:.2f}")
                except Exception as e:
                    await u.message.reply_text(f"üî¥ ORDER FAIL {sym}: {e}")
        except Exception as e:
            await u.message.reply_text(f"üî¥ Autotrade error: {e}")

# =========================
# –§–û–ù–û–í–ò–ô –°–ö–ê–ù–ï–† (24/7)
# =========================
async def periodic_scan_job(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ JobQueue ‚Äî –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –∑ event loop.
    –ë—ñ–∂–∏—Ç—å –∑–∞–≤–∂–¥–∏, –∫—Ä–∏–ø—Ç–∞ –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–µ—Å—ñ—ó.
    """
    # –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—å –ø–æ –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö, –¥–µ –Ω–∞—Å —É–∂–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–ª–∏
    for chat_id, st in list(STATE.items()):
        try:
            rep, picks_s, picks_c = await scan_all(st)
            st["last_scan_txt"] = rep
            if st.get("autotrade"):
                # —Å–ø—Ä–æ–±–∞ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ä–¥–µ—Ä–∏
                for sym in (picks_s[:ALPACA_MAX_STOCKS] + picks_c[:ALPACA_MAX_CRYPTO]):
                    try:
                        await place_notional_order(sym, "buy", ALPACA_NOTIONAL)
                        await ctx.bot.send_message(chat_id, f"üü¢ ORDER OK: {sym} ${ALPACA_NOTIONAL:.2f}")
                    except Exception as e:
                        await ctx.bot.send_message(chat_id, f"üî¥ ORDER FAIL {sym}: {e}")
        except Exception as e:
            try:
                await ctx.bot.send_message(chat_id, f"üî¥ periodic_scan error: {e}")
            except Exception:
                pass

# =========================
# HELP
# =========================
async def help_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    await u.message.reply_text(
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /alp_on, /alp_off, /alp_status\n"
        "‚Ä¢ /signals_alpaca ‚Äî —Ä—É—á–Ω–∏–π —Å–∫–∞–Ω\n"
        "‚Ä¢ /aggressive /scalp /default /swing /safe ‚Äî —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ—ñ–ª—é\n"
        "–ö—Ä–∏–ø—Ç–∞ 24/7, –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–µ—Å—ñ—ó.",
        reply_markup=main_keyboard()
    )
# ----- /alp_status -----
async def alp_status_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    st = STATE.setdefault(u.effective_chat.id, default_state())
    try:
        acc = await alp_account()
        clk = await alp_clock()
        txt = (
            "üß≥ Alpaca: "
            f"status={acc.get('status','?')}\n"
            f"‚Ä¢ cash=${float(acc.get('cash',0)):.2f}\n"
            f"‚Ä¢ buying_power=${float(acc.get('buying_power',0)):.2f}\n"
            f"‚Ä¢ equity=${float(acc.get('equity',0)):.2f}\n"
            f"‚Ä¢ market_open={'YES' if bool(clk.get('is_open')) else 'NO'}\n"
            f"Mode={st.get('mode')} ¬∑ Autotrade={'ON' if st.get('autotrade') else 'OFF'}"
        )
    except Exception as e:
        txt = f"‚ùå Alpaca error: {e}"
    await u.message.reply_text(txt)
# ===== MAIN =====

def main():
    if not TG_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ")

    app = Application.builder().token(TG_TOKEN).build()

    # handlers
    app.add_handler(CommandHandler("alp_status", alp_status_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("aggressive", aggressive_cmd))
    app.add_handler(CommandHandler("scalp", scalp_cmd))
    app.add_handler(CommandHandler("default", default_cmd))
    app.add_handler(CommandHandler("swing", swing_cmd))
    app.add_handler(CommandHandler("safe", safe_cmd))

    app.add_handler(CommandHandler("alp_on", alp_on_cmd))
    app.add_handler(CommandHandler("alp_off", alp_off_cmd))
    app.add_handler(CommandHandler("signals_alpaca", signals_cmd))

    # –§–æ–Ω–æ–≤–∏–π —Å–∫–∞–Ω–µ—Ä –∑–∞–ø—É—Å–∫–∞—î–º–æ –ª–∏—à–µ —á–µ—Ä–µ–∑ JobQueue
    app.job_queue.run_repeating(periodic_scan_job, interval=120, first=5)

    # –ë–ª–æ–∫—É—é—á–∏–π –∑–∞–ø—É—Å–∫ –ë–ï–ó await —ñ –ë–ï–ó asyncio.run
    app.run_polling()

if __name__ == "__main__":
    main()
