# -*- coding: utf-8 -*-

"""
bot_alpaca.py
–ü–æ–≤–Ω–∏–π –∫–∞—Ä–∫–∞—Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –∑ Alpaca, —ñ–∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º –∫–µ—Ä—É–≤–∞–Ω–Ω—è–º event loop.
- –ë–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ "This event loop is already running"
- –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä–µ–∂–∏–º—ñ–≤: scalp / aggressive / safe
- –°—Ç–∞–Ω –ø–æ —á–∞—Ç–∞—Ö —É STATE
- –ú—ñ—Å—Ü—è –¥–ª—è —Ç–≤–æ—î—ó –ª–æ–≥—ñ–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞/–∞–≤—Ç–æ—Ç—Ä–µ–π–¥—É –ø–æ–∑–Ω–∞—á–µ–Ω—ñ TODO
"""

import os
import math
import json
import asyncio
import time
from typing import Dict, Any, Optional, Tuple, List

import aiohttp
from aiohttp import ClientSession, ClientTimeout

from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    JobQueue,
)

# ========= ENV =========
TG_TOKEN = (os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TG_TOKEN") or "").strip()

ALPACA_API_KEY   = (os.getenv("ALPACA_API_KEY") or "").strip()
ALPACA_API_SECRET= (os.getenv("ALPACA_API_SECRET") or "").strip()

ALPACA_BASE_URL  = (os.getenv("ALPACA_BASE_URL") or "https://paper-api.alpaca.markets").rstrip("/")
ALPACA_DATA_URL  = (os.getenv("ALPACA_DATA_URL") or "https://data-api.alpaca.markets").rstrip("/")

# –ù–æ–º—ñ–Ω–∞–ª–∏/–ª—ñ–º—ñ—Ç–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –º–æ–∂–µ—à –ø—ñ–¥–∫—Ä—É—Ç–∏—Ç–∏/–∑–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –±—Ä–∞—Ç–∏ –∑ ENV
ALPACA_NOTIONAL = float(os.getenv("ALPACA_NOTIONAL") or 200)
ALPACA_TOP_N    = int(os.getenv("ALPACA_TOP_N") or 25)

# —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏ –∞–≤—Ç–æ—Å–∫–∞–Ω—É
SCAN_INTERVAL_SEC    = int(os.getenv("SCAN_INTERVAL_SEC") or 300)
DEDUP_COOLDOWN_MIN   = int(os.getenv("DEDUP_COOLDOWN_MIN") or 240)

# ====== –ì–õ–û–ë–ê–õ STATE (per chat) ======
STATE: Dict[int, Dict[str, Any]] = {}

# ===== –†–ï–ñ–ò–ú–ò (–ø—Ä–∏–∫–ª–∞–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Äì –∫–æ—Ä–∏–≥—É–π –ø—ñ–¥ —Å–µ–±–µ) =====
MODE_PARAMS = {
    "aggressive": {
        "bars": ("15Min", "30Min", "1Hour"),
        "rsi_buy": 55.0, "rsi_sell": 45.0,
        "ema_fast": 15, "ema_slow": 30,
        "top_n": ALPACA_TOP_N,
        "tp_pct": 0.015,   # 1.5%
        "sl_pct": 0.008,   # 0.8%
    },
    "scalp": {
        "bars": ("5Min", "15Min", "1Hour"),
        "rsi_buy": 58.0, "rsi_sell": 42.0,
        "ema_fast": 9, "ema_slow": 21,
        "top_n": ALPACA_TOP_N,
        "tp_pct": 0.006,   # 0.6%
        "sl_pct": 0.0035,  # 0.35%
    },
    "safe": {
        "bars": ("30Min", "1Hour", "1Day"),
        "rsi_buy": 52.0, "rsi_sell": 48.0,
        "ema_fast": 20, "ema_slow": 50,
        "top_n": ALPACA_TOP_N,
        "tp_pct": 0.01,    # 1%
        "sl_pct": 0.006,   # 0.6%
    },
}
DEFAULT_MODE = "scalp"

# ====== HTTP session (—Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ main) ======
HTTP: Optional[ClientSession] = None

# ====== –•–µ–ª–ø–µ—Ä–∏ ======
def _chat_state(chat_id: int) -> Dict[str, Any]:
    """–Ü–Ω—ñ—Ç —Å—Ç–∞–Ω —á–∞—Ç—É –∑–∞ –ø–æ—Ç—Ä–µ–±–∏."""
    if chat_id not in STATE:
        STATE[chat_id] = {
            "mode": DEFAULT_MODE,
            "autotrade": False,
            "autoscan": False,
            "side": "long",
            "interval": SCAN_INTERVAL_SEC,
            "last_signals_at": 0.0,
        }
    return STATE[chat_id]

def alpaca_headers() -> Dict[str, str]:
    return {
        "APCA-API-KEY-ID": ALPACA_API_KEY,
        "APCA-API-SECRET-KEY": ALPACA_API_SECRET,
        "Content-Type": "application/json",
        "Accept": "application/json",
    }

async def alpaca_get(path: str, params: Optional[Dict[str, Any]] = None) -> Any:
    assert HTTP is not None, "HTTP session not initialized"
    url = f"{ALPACA_BASE_URL}{path}"
    async with HTTP.get(url, headers=alpaca_headers(), params=params) as r:
        if r.status >= 400:
            txt = await r.text()
            raise RuntimeError(f"GET {path} {r.status}: {txt}")
        return await r.json()

async def alpaca_post(path: str, payload: Dict[str, Any]) -> Any:
    assert HTTP is not None, "HTTP session not initialized"
    url = f"{ALPACA_BASE_URL}{path}"
    async with HTTP.post(url, headers=alpaca_headers(), data=json.dumps(payload)) as r:
        txt = await r.text()
        if r.status >= 400:
            raise RuntimeError(f"POST {path} {r.status}: {txt}")
        return json.loads(txt) if txt else {}

# ====== –í–∞—à—ñ –î–ê–ù–Ü / –°–ò–ì–ù–ê–õ–ò (TODO –≤—Å—Ç–∞–≤ —Å–≤–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó) ======
async def scan_crypto_symbols(state: Dict[str, Any]) -> List[str]:
    """
    TODO: —Ç—É—Ç —Ç–≤–æ—è –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–±–æ—Ä—É —Ç–æ–ø-–∫—Ä–∏–ø—Ç–æ–ø–∞—Ä (–∑–∞ –æ–±—Å—è–≥–æ–º/—Å–∏–≥–Ω–∞–ª–∞–º–∏/—Ñ—ñ–ª—å—Ç—Ä–∞–º–∏).
    –ü–æ–≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∏–ø—É ["AAVE/USD","AVAX/USD","BAT/USD"] –∞–±–æ –ø—É—Å—Ç–∏–π.
    """
    # –ø—Ä–∏–∫–ª–∞–¥-–∑–∞–≥–ª—É—à–∫–∞: –ø–æ–≤–µ—Ä–Ω–µ–º–æ 3 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –¥–µ–º–æ
    return ["AAVE/USD", "AVAX/USD", "BAT/USD"]

async def scan_stock_symbols(state: Dict[str, Any]) -> List[str]:
    """
    TODO: —Ç—É—Ç —Ç–≤–æ—è –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–±–æ—Ä—É –∞–∫—Ü—ñ–π (—Ç–æ–ø-N, —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–æ—â–æ).
    –ü–æ–≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä—ñ–≤, –Ω–∞–ø—Ä. ["AAPL","AMAT","ADBE"]
    """
    return ["AAPL", "AMAT", "ADBE"]

# ====== –¢–µ–ª–µ–≥—Ä–∞–º —Ö–µ–ª–ø–µ—Ä–∏ ======
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["/aggressive", "/scalp", "/safe"],
            ["/signals_crypto", "/signals_stocks"],
            ["/alp_on", "/alp_off", "/alp_status"],
            ["/auto_on", "/auto_off", "/auto_status"],
        ],
        resize_keyboard=True
    )

async def send_info(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str) -> None:
    try:
        await ctx.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
    except Exception:
        # —Ç–∏—Ö–æ, —â–æ–± –Ω–µ —Ä–æ–Ω—è—Ç–∏ job
        pass

# ====== HANDLERS ======
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    st = _chat_state(update.effective_chat.id)
    await update.message.reply_text(
        "–ö—Ä–∏–ø—Ç–∞ —Ç–æ—Ä–≥—É—î—Ç—å—Å—è 24/7; –∞–∫—Ü—ñ—ó ‚Äî –∫–æ–ª–∏ —Ä–∏–Ω–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π.\n"
        "–°–∫–∞–Ω–µ—Ä/–∞–≤—Ç–æ—Ç—Ä–µ–π–¥ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —É —Ñ–æ–Ω—ñ.\n"
        "–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥: /alp_on  ¬∑  –ó—É–ø–∏–Ω–∏—Ç–∏: /alp_off  ¬∑  –°—Ç–∞–Ω: /alp_status\n"
        "–§–æ–Ω–æ–≤–∏–π –∞–≤—Ç–æ—Å–∫–∞–Ω: /auto_on  ¬∑  /auto_off  ¬∑  /auto_status",
        reply_markup=main_keyboard(),
    )

async def mode_set(update: Update, context: ContextTypes.DEFAULT_TYPE, name: str) -> None:
    st = _chat_state(update.effective_chat.id)
    st["mode"] = name
    await update.message.reply_text(f"–†–µ–∂–∏–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {name.upper()}", reply_markup=main_keyboard())

async def aggressive_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await mode_set(update, context, "aggressive")

async def scalp_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await mode_set(update, context, "scalp")

async def safe_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await mode_set(update, context, "safe")

async def alp_status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        acc = await alpaca_get("/v2/account")
        st = _chat_state(update.effective_chat.id)
        txt = (
            "üì¶ Alpaca:\n"
            f"‚Ä¢ status=<b>{acc.get('status','?').upper()}</b>\n"
            f"‚Ä¢ cash=${acc.get('cash','?')}\n"
            f"‚Ä¢ buying_power=${acc.get('buying_power','?')}\n"
            f"‚Ä¢ equity=${acc.get('equity','?')}\n"
            f"Mode=<b>{st['mode']}</b> ¬∑ Autotrade=<b>{'ON' if st['autotrade'] else 'OFF'}</b> ¬∑ "
            f"AutoScan=<b>{'ON' if st['autoscan'] else 'OFF'}</b> ¬∑ Side=<b>{st['side']}</b>"
        )
        await update.message.reply_text(txt, parse_mode=ParseMode.HTML, reply_markup=main_keyboard())
    except Exception as e:
        await update.message.reply_text(f"‚ùå alp_status error: {e}")

async def alp_on_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    st = _chat_state(update.effective_chat.id)
    st["autotrade"] = True
    await update.message.reply_text("‚úÖ Alpaca AUTOTRADE: ON")

async def alp_off_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    st = _chat_state(update.effective_chat.id)
    st["autotrade"] = False
    await update.message.reply_text("‚õî Alpaca AUTOTRADE: OFF")

async def auto_on_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    st = _chat_state(update.effective_chat.id)
    st["autoscan"] = True
    await update.message.reply_text(f"‚úÖ AUTO-SCAN: ON (–∫–æ–∂–Ω—ñ {st['interval']}s)")

async def auto_off_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    st = _chat_state(update.effective_chat.id)
    st["autoscan"] = False
    await update.message.reply_text("‚õî AUTO-SCAN: OFF")

async def auto_status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    st = _chat_state(update.effective_chat.id)
    await update.message.reply_text(
        f"AutoScan={'ON' if st['autoscan'] else 'OFF'}; Autotrade={'ON' if st['autotrade'] else 'OFF'}; "
        f"Mode={st['mode']} ¬∑ Side={st['side']} ¬∑ Interval={st['interval']}s"
    )

# ====== SIGNALS (–≤–∏–∫–ª–∏–∫–∞—é—Ç—å —Ç–≤—ñ–π —Å–∫–∞–Ω–µ—Ä) ======
async def signals_crypto_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    st = _chat_state(chat_id)

    try:
        symbols = await scan_crypto_symbols(st)
        top = symbols[: min(len(symbols), 25)]
        use_n = min( len(top),  max(1,  st.get("use_for_trade",  st.get("limit", 3))) )
        head = f"ü¶Ö –°–∫–∞–Ω–µ—Ä (–∫—Ä–∏–ø—Ç–∞):\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö USD-–ø–∞—Ä: {len(symbols)}\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ (–ª—ñ–º—ñ—Ç–æ–º): {use_n}\n‚Ä¢ –ü–µ—Ä—à—ñ 25: {', '.join(top)}"
        await update.message.reply_text(head)

        # TODO: —Ç—É—Ç —Ç–≤—ñ–π –∫–æ–¥ –≤—Ö–æ–¥—É –≤ –ø–æ–∑–∏—Ü—ñ—é/–≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è SL/TP
        # –ú–æ–∂–µ—à –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü—ñ—é trade_crypto(symbol, st)
        # —ñ –≤ –Ω—ñ–π —Ä–æ–±–∏—Ç–∏ –≤—Å–µ —è–∫ —É —Ç–≤–æ—î–º—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É —Ñ–∞–π–ª—ñ.
    except Exception as e:
        await update.message.reply_text(f"üî¥ signals_crypto error: {e}")

async def signals_stocks_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    st = _chat_state(chat_id)

    try:
        symbols = await scan_stock_symbols(st)
        top = symbols[: min(len(symbols), 25)]
        use_n = min( len(top),  max(1,  st.get("use_for_trade",  st.get("limit", 3))) )
        head = f"üì° –°–∫–∞–Ω–µ—Ä (–∞–∫—Ü—ñ—ó):\n‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤ —É —Å–ø–∏—Å–∫—É: {len(symbols)}\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ (–ª—ñ–º—ñ—Ç–æ–º): {use_n}\n‚Ä¢ –ü–µ—Ä—à—ñ 25: {', '.join(top)}"
        await update.message.reply_text(head)

        # TODO: —Ç—É—Ç —Ç–≤—ñ–π –∫–æ–¥ –≤—Ö–æ–¥—É/–±—Ä–µ–∫–µ—Ç–∏/SL/TP –¥–ª—è –∞–∫—Ü—ñ–π
    except Exception as e:
        await update.message.reply_text(f"üî¥ signals_stocks error: {e}")

# ====== –§–æ–Ω–æ–≤–∏–π —Ü–∏–∫–ª —Å–∫–∞–Ω–µ—Ä–∞ (JobQueue) ======
async def scanner_loop(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –¥–∂–æ–±–æ—é —Ä–∞–∑ —É N —Å–µ–∫—É–Ω–¥ –¥–ª—è –ö–û–ñ–ù–û–ì–û —á–∞—Ç—É, –¥–µ autoscan=True."""
    now = time.time()
    for chat_id, st in list(STATE.items()):
        if not st.get("autoscan"):
            continue
        # —Ö–æ–ª–æ–¥–Ω–∏–π –¥–∞—É–Ω–ª—ñ–º—ñ—Ç, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏
        if now - st.get("last_signals_at", 0) < st.get("interval", SCAN_INTERVAL_SEC) - 2:
            continue
        st["last_signals_at"] = now

        try:
            # TODO: —Ç—É—Ç –º–æ–∂–µ—à –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –∞–≤—Ç–æ—Å–∫–∞–Ω —ñ–∑ –≤—Ö–æ–¥–æ–º —É –ø–æ–∑–∏—Ü—ñ—ó
            # –ù–∞–ø—Ä., —Å–ø–æ—á–∞—Ç–∫—É crypto, –ø–æ—Ç—ñ–º stocks ‚Äî –∑–≥—ñ–¥–Ω–æ –∑ —Ç–≤–æ—ó–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:
            # symbols = await scan_crypto_symbols(st)
            # ... —Ç–≤—ñ–π –∞–≤—Ç–æ—Ç—Ä–µ–π–¥-–∫–æ–¥ ...
            await send_info(ctx, chat_id, "üü¢ AUTO-SCAN tick...")
        except Exception as e:
            await send_info(ctx, chat_id, f"üî¥ AUTO-SCAN error: {e}")

# ====== MAIN ======
async def main() -> None:
    global HTTP
    if not TG_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is missing")

    HTTP = aiohttp.ClientSession(timeout=ClientTimeout(total=30))

    app = Application.builder().token(TG_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("alp_status", alp_status_cmd))
    app.add_handler(CommandHandler("alp_on", alp_on_cmd))
    app.add_handler(CommandHandler("alp_off", alp_off_cmd))

    app.add_handler(CommandHandler("auto_on", auto_on_cmd))
    app.add_handler(CommandHandler("auto_off", auto_off_cmd))
    app.add_handler(CommandHandler("auto_status", auto_status_cmd))

    app.add_handler(CommandHandler("aggressive", aggressive_cmd))
    app.add_handler(CommandHandler("scalp", scalp_cmd))
    app.add_handler(CommandHandler("safe", safe_cmd))

    app.add_handler(CommandHandler("signals_crypto", signals_crypto_cmd))
    app.add_handler(CommandHandler("signals_stocks", signals_stocks_cmd))

    # –§–æ–Ω–æ–≤–∞ –¥–∂–æ–±–∞ (–æ–¥–Ω–∞ –Ω–∞ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫). –í—Å–µ—Ä–µ–¥–∏–Ω—ñ –≤–æ–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ STATE.
    app.job_queue.run_repeating(scanner_loop, interval=5, first=5)  # 5s tick, —Ç–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–Ω—Ç—Ä–æ–ª–∏—à —á–∞—Å—Ç–æ—Ç—É –Ω–∞ —á–∞—Ç

    print("Bot started.")
    await app.initialize()
    await app.start()
    # PTB v20+: –¥–ª—è polling
    await app.updater.start_polling()
    await app.updater.idle()

    # Graceful shutdown
    await app.stop()
    await app.shutdown()
    if HTTP:
        await HTTP.close()

if __name__ == "__main__":
    asyncio.run(main())
