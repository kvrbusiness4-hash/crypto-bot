# bot_alpaca.py
# -*- coding: utf-8 -*-

import os
import json
import math
from typing import Dict, Any, Tuple, List

from aiohttp import ClientSession, ClientTimeout

from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes
# ==== GLOBAL STATE (–≤—Å—Ç–∞–≤ –ø—ñ–¥ —ñ–º–ø–æ—Ä—Ç–∞–º–∏) ====
OPEN_TRADES: Dict[str, Dict[str, Any]] = {}  # –∞–∫—Ç–∏–≤–Ω—ñ —É–≥–æ–¥–∏ –ø–æ —Å–∏–º–≤–æ–ª—É


# ==== SL/TP —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ (–≤—Å—Ç–∞–≤ –ø–æ—Ä—É—á –∑ —ñ–Ω—à–∏–º–∏ —Ö–µ–ª–ø–µ—Ä–∞–º–∏) ====
def calc_sl_tp(px: float, hi: float, lo: float, conf: Dict[str, Any]) -> Tuple[float, float]:
    """
    –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ TP/SL –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∂–∏–º—É:
      - tp_pct / sl_pct –∑ MODE_PARAMS
      - –¥–æ–¥–∞—Ç–∫–æ–≤–æ –≤—Ä–∞—Ö—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω (hi/lo) —è–∫ –ø—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫—É
    –ü–æ–≤–µ—Ä—Ç–∞—î: (tp_price, sl_price)
    """
    tp_pct = float(conf.get("tp_pct", 0.015))  # 1.5% –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    sl_pct = float(conf.get("sl_pct", 0.008))  # 0.8% –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    tp_price = round(px * (1.0 + tp_pct), 6)
    sl_price = round(px * (1.0 - sl_pct), 6)

    # –ø—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—è –≤—ñ–¥ ¬´–∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ¬ª: SL –Ω–∏–∂—á–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ low —â–æ–Ω–∞–π–º–µ–Ω—à–µ –Ω–∞ —Ç–∏–∫
    if lo is not None:
        sl_price = min(sl_price, round(lo * 0.999, 6))
    # TP –≤–∏—â–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ high —Ç—Ä–æ—Ö–∏
    if hi is not None:
        tp_price = max(tp_price, round(hi * 1.001, 6))

    return tp_price, sl_price


# ==== HTTP-—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è BRACKET-–æ—Ä–¥–µ—Ä–∞ (–≤—Å—Ç–∞–≤ –ø–æ—Ä—É—á –∑ —ñ–Ω—à–∏–º–∏ Alpaca-—Ö–µ–ª–ø–µ—Ä–∞–º–∏) ====
async def place_bracket_notional_order(sym: str, notional: float, tp: float, sl: float) -> Dict[str, Any]:
    """
    LONG bracket order –¥–ª—è crypto –Ω–∞ Alpaca (paper):
      POST /v2/orders –∑ order_class="bracket", notional, take_profit, stop_loss.
    """
    url = f"{ALPACA_BASE_URL}/v2/orders"
    payload = {
        "symbol": sym.replace("/", ""),  # "AAVEUSD"
        "side": "buy",
        "type": "market",
        "time_in_force": "gtc",
        "notional": f"{notional:.2f}",
        "order_class": "bracket",
        "take_profit": {"limit_price": f"{tp:.6f}"},
        "stop_loss": {"stop_price": f"{sl:.6f}"}
    }
    headers = {
        "APCA-API-KEY-ID": ALPACA_API_KEY,
        "APCA-API-SECRET-KEY": ALPACA_API_SECRET,
        "Content-Type": "application/json",
        "Accept": "application/json",
    }
    async with ClientSession(timeout=ClientTimeout(total=30)) as s:
        async with s.post(url, headers=headers, json=payload) as r:
            data = await r.json()
            if r.status >= 300:
                raise RuntimeError(f"POST {url} {r.status}: {data}")
            return data


# ==== –°–ö–ê–ù–ï–†/–†–ê–ù–ö–ï–† (–∑–∞–ª–∏—à —Å–≤—ñ–π, —è–∫—â–æ –≤–∂–µ –ø—Ä–∞—Ü—é—î) ====


# ==== /signals_crypto ‚Äî –°–ö–ê–ù + –ê–í–¢–û–¢–†–ï–ô–î TOP-N –∑ TP/SL (–ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω–∏) ====
async def signals_crypto(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedet(u.effective_chat.id)
    try:
        # –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–∞–Ω–∂–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ (—Ç–≤–æ—è —Ñ—É–Ω–∫—Ü—ñ—è —Ä–∞–Ω–∂—É–≤–∞–Ω–Ω—è)
        report, ranked = await scan_rank_crypto(st)
        await u.message.reply_text(report)

        # —è–∫—â–æ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥ —É–≤—ñ–º–∫–Ω–µ–Ω–æ ‚Äî —Ç–æ—Ä–≥—É—î–º–æ TOP-N (LONG only)
        if st.get("autotrade") and ranked:
            conf = mode_conf(st)
            top_n = min(int(conf.get("top_n", 3)), len(ranked))
            picks = ranked[:top_n]

            for _, sym, raw in picks:
                # –∞–Ω—Ç–∏–¥—É–±–ª—å: –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —â–µ —Ä–∞–∑ —Ç—É –∂ —Å–∞–º—É –ø–∞—Ä—É
                if sym in OPEN_TRADES:
                    await u.message.reply_text(f"‚è© –ü—Ä–æ–ø—É—Å–∫ {sym}: –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è")
                    continue

                h = [float(x["h"]) for x in raw]
                l = [float(x["l"]) for x in raw]
                ccls = [float(x["c"]) for x in raw]
                px = ccls[-1]

                tp, sl = calc_sl_tp(px, max(h), min(l), conf)

                try:
                    resp = await place_bracket_notional_order(sym, ALPACA_NOTIONAL, tp, sl)
                    OPEN_TRADES[sym] = {"entry": px, "tp": tp, "sl": sl, "order_id": resp.get("id")}
                    await u.message.reply_text(
                        f"üü¢ ORDER OK: {sym} BUY ${ALPACA_NOTIONAL:.2f}\nTP: {tp:.6f}  ¬∑  SL: {sl:.6f}"
                    )
                except Exception as e:
                    await u.message.reply_text(f"üî¥ ORDER FAIL {sym}: {e}")
    except Exception as e:
        await u.message.reply_text(f"üî¥ signals_crypto error: {e}")


# ==== /trade_crypto ‚Äî –º–∏—Ç—Ç—î–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è TOP-N –∑ TP/SL (–ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω–∏) ====
async def trade_crypto(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedet(u.effective_chat.id)
    try:
        # –±–µ—Ä–µ–º–æ TOP-N –∑ —É–∂–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–≤—ñ—Ç—É)
        _, ranked = await scan_rank_crypto(st)
        if not ranked:
            await u.message.reply_text("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ"); return

        conf = mode_conf(st)
        top_n = min(int(conf.get("top_n", 3)), len(ranked))
        picks = ranked[:top_n]

        for _, sym, raw in picks:
            if sym in OPEN_TRADES:
                await u.message.reply_text(f"‚è© –ü—Ä–æ–ø—É—Å–∫ {sym}: –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è")
                continue

            h = [float(x["h"]) for x in raw]
            l = [float(x["l"]) for x in raw]
            ccls = [float(x["c"]) for x in raw]
            px = ccls[-1]

            tp, sl = calc_sl_tp(px, max(h), min(l), conf)

            try:
                resp = await place_bracket_notional_order(sym, ALPACA_NOTIONAL, tp, sl)
                OPEN_TRADES[sym] = {"entry": px, "tp": tp, "sl": sl, "order_id": resp.get("id")}
                await u.message.reply_text(
                    f"üü¢ ORDER OK: {sym} BUY ${ALPACA_NOTIONAL:.2f}\nTP: {tp:.6f}  ¬∑  SL: {sl:.6f}"
                )
            except Exception as e:
                await u.message.reply_text(f"üî¥ ORDER FAIL {sym}: {e}")

    except Exception as e:
        await u.message.reply_text(f"üî¥ trade_crypto error: {e}")
# ========= ENV =========
TG_TOKEN = (os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN") or "").strip()

ALPACA_API_KEY = (os.getenv("ALPACA_API_KEY") or "").strip()
ALPACA_API_SECRET = (os.getenv("ALPACA_API_SECRET") or "").strip()

ALPACA_BASE_URL = (os.getenv("ALPACA_BASE_URL") or "https://paper-api.alpaca.markets").rstrip("/")
ALPACA_DATA_URL = (os.getenv("ALPACA_DATA_URL") or "https://data.alpaca.markets").rstrip("/")

ALPACA_NOTIONAL = float(os.getenv("ALPACA_NOTIONAL") or 25)          # $ –Ω–∞ –æ—Ä–¥–µ—Ä
ALPACA_TOP_N   = int(os.getenv("ALPACA_TOP_N") or 2)                  # —Å–∫—ñ–ª—å–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏
SCAN_EVERY_SEC = int(os.getenv("SCAN_EVERY_SEC") or 120)

# ========= STATE per chat =========
def default_state() -> Dict[str, Any]:
    return {
        "mode": "aggressive",      # –ø—Ä–æ—Ñ—ñ–ª—å: aggressive/scalp/default/swing/safe
        "autotrade": False,
        "side_mode": "long",       # long | short | both (–¥–ª—è –∫—Ä–∏–ø—Ç–∏ short –≤—Å–µ –æ–¥–Ω–æ –±–ª–æ–∫—É—î–º–æ)
    }

STATE: Dict[int, Dict[str, Any]] = {}

def stedef(chat_id: int) -> Dict[str, Any]:
    return STATE.setdefault(chat_id, default_state())

# ========= UI =========
def main_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        ["/aggressive", "/scalp", "/default"],
        ["/swing", "/safe", "/help"],
        ["/signals_crypto", "/trade_crypto"],
        ["/long_mode", "/short_mode", "/both_mode"],
        ["/alp_on", "/alp_status", "/alp_off"],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

# ========= Helpers: HTTP to Alpaca =========
def alp_headers() -> Dict[str, str]:
    return {
        "APCA-API-KEY-ID": ALPACA_API_KEY,
        "APCA-API-SECRET-KEY": ALPACA_API_SECRET,
        "Content-Type": "application/json",
    }

async def fetch_json_full(url: str, params: Dict[str, Any] | None = None) -> Any:
    timeout = ClientTimeout(total=30)
    async with ClientSession(timeout=timeout) as s:
        async with s.get(url, headers=alp_headers(), params=params) as r:
            if r.status >= 400:
                raise RuntimeError(f"GET {r.url} {r.status}: {await r.text()}")
            return await r.json()

async def alp_post(path: str, payload: Dict[str, Any]) -> Any:
    url = f"{ALPACA_BASE_URL}/v2/{path.lstrip('/')}"
    timeout = ClientTimeout(total=30)
    async with ClientSession(timeout=timeout) as s:
        async with s.post(url, headers=alp_headers(), data=json.dumps(payload)) as r:
            if r.status >= 400:
                raise RuntimeError(f"POST {r.url} {r.status}: {await r.text()}")
            return await r.json()

async def alp_account() -> Dict[str, Any]:
    url = f"{ALPACA_BASE_URL}/v2/account"
    return await fetch_json_full(url)

# ========= Symbols helpers =========
CRYPTO_QUOTES = {"USD", "USDT", "USDC", "USDG"}

def is_crypto_pair(sym: str) -> bool:
    parts = sym.split("/")
    return len(parts) == 2 and parts[1].upper() in CRYPTO_QUOTES

# –ù–µ–≤–µ–ª–∏–∫–∏–π whitelist –Ω–∞–π–ª—ñ–∫–≤—ñ–¥–Ω—ñ—à–∏—Ö USD-–ø–∞—Ä (–ø–∞–ø–µ—Ä–æ–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è –ø—ñ–¥—Ç—Ä–∏–º—É—î —ó—Ö)
CRYPTO_USD_PAIRS: List[str] = [
    "BTC/USD","ETH/USD","SOL/USD","LTC/USD","DOGE/USD","AVAX/USD","AAVE/USD","MKR/USD",
    "DOT/USD","LINK/USD","SHIB/USD","UNI/USD","PEPE/USD","XRP/USD","TRUMP/USD","CRV/USD",
    "BCH/USD","BAT/USD","GRT/USD","XTZ/USD","USDC/USD","USDT/USD","USDG/USD","YFI/USD",
    "LDO/USD"
]

# ========= Data API (bars v1beta3) =========
async def get_bars_crypto(pairs: List[str], timeframe: str, limit: int) -> Dict[str, Any]:
    """
    timeframe: '5Min' | '15Min' | '30Min' | '60Min' | '1Hour'
    """
    url = f"{ALPACA_DATA_URL}/v1beta3/crypto/us/bars"
    sym_csv = ",".join(pairs)
    params = {
        "symbols": sym_csv,
        "timeframe": timeframe,
        "limit": str(int(limit)),
        "sort": "asc",
    }
    return await fetch_json_full(url, params)

# ========= Indicators =========
def ema(values: List[float], period: int) -> List[float]:
    if not values:
        return []
    k = 2.0 / (period + 1.0)
    out: List[float] = []
    ema_prev = values[0]
    for v in values:
        ema_prev = v * k + ema_prev * (1 - k)
        out.append(ema_prev)
    return out

def rsi(values: List[float], period: int = 14) -> float:
    if len(values) < period + 1:
        return 50.0
    gains = 0.0
    losses = 0.0
    for i in range(-period, 0):
        diff = values[i] - values[i-1]
        if diff >= 0:
            gains += diff
        else:
            losses -= diff
    if losses == 0:
        return 70.0
    rs = gains / losses
    return 100.0 - 100.0 / (1.0 + rs)

# ========= Mode profiles =========
MODE_PARAMS: Dict[str, Dict[str, Any]] = {
    # –±–∞–≥–∞—Ç–æ —Å–∏–≥–Ω–∞–ª—ñ–≤, –±—ñ–ª—å—à–µ —Ä–∏–∑–∏–∫—É
    "aggressive": {
        "bars": ("15Min", "30Min", "60Min"),
        "rsi_buy": 55.0,     # LONG —è–∫—â–æ RSI >=
        "rsi_sell": 45.0,    # SHORT —è–∫—â–æ RSI <= (–¥–ª—è –∫—Ä–∏–ø—Ç–∏ short –±–ª–æ–∫—É—î—Ç—å—Å—è)
        "ema_fast": 15,
        "ema_slow": 30,
        "top_n": ALPACA_TOP_N,
    },
    # –∫–æ—Ä–æ—Ç–∫—ñ —Ä—É—Ö–∏, –≤—É–∂—á—ñ SL/TP ‚Äî —É —Ü—ñ–π –≤–µ—Ä—Å—ñ—ó SL/TP –ª–∏—à–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è —ñ –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è
    "scalp": {
        "bars": ("5Min", "15Min", "1Hour"),
        "rsi_buy": 58.0,
        "rsi_sell": 42.0,
        "ema_fast": 10,
        "ema_slow": 25,
        "top_n": max(1, ALPACA_TOP_N),
    },
    "default": {
        "bars": ("15Min", "30Min", "60Min"),
        "rsi_buy": 56.0,
        "rsi_sell": 44.0,
        "ema_fast": 15,
        "ema_slow": 30,
        "top_n": ALPACA_TOP_N,
    },
    "swing": {
        "bars": ("30Min", "60Min", "1Hour"),
        "rsi_buy": 57.0,
        "rsi_sell": 43.0,
        "ema_fast": 20,
        "ema_slow": 40,
        "top_n": max(1, ALPACA_TOP_N - 1),
    },
    "safe": {
        "bars": ("30Min", "60Min", "1Hour"),
        "rsi_buy": 60.0,
        "rsi_sell": 40.0,
        "ema_fast": 20,
        "ema_slow": 50,
        "top_n": 1,
    },
}

def mode_conf(st: Dict[str, Any]) -> Dict[str, Any]:
    return MODE_PARAMS.get(st.get("mode", "default"), MODE_PARAMS["default"])

# ========= Ranking =========
def rank_score(c15: List[float], c30: List[float], c60: List[float],
               rsi_buy: float, rsi_sell: float, ema_fast_p: int, ema_slow_p: int) -> float:
    # RSI –Ω–∞ 3 –¢–§
    r1 = rsi(c15, 14)
    r2 = rsi(c30, 14)
    r3 = rsi(c60, 14)
    # EMA —Ç—Ä–µ–Ω–¥ (–Ω–∞ —Å—Ç–∞—Ä—à–æ–º—É)
    e_fast = ema(c60, ema_fast_p)
    e_slow = ema(c60, ema_slow_p)
    trend = 0.0
    if e_fast and e_slow:
        trend = (e_fast[-1] - e_slow[-1]) / max(1e-9, abs(e_slow[-1]))
    # —Å–∫—ñ–ª—å–∫–∏ –¢–§ –∑–∞ LONG / SHORT
    bias_long = (1 if r1 >= rsi_buy else 0) + (1 if r2 >= rsi_buy else 0) + (1 if r3 >= rsi_buy else 0)
    bias_short = (1 if r1 <= rsi_sell else 0) + (1 if r2 <= rsi_sell else 0) + (1 if r3 <= rsi_sell else 0)
    bias = max(bias_long, bias_short)
    return bias*100 + trend*50 - abs(50.0 - r1)

async def scan_rank_crypto(st: Dict[str, Any]) -> Tuple[str, List[Tuple[float, str, List[Dict[str, Any]]]]]:
    conf = mode_conf(st)
    tf15, tf30, tf60 = conf["bars"]

    # –∑–∞–º—ñ—Å—Ç—å 60Min ‚Üí 1Hour
    bars15 = await get_bars_crypto(CRYPTO_USD_PAIRS, "15Min", limit=120)
    bars30 = await get_bars_crypto(CRYPTO_USD_PAIRS, "30Min", limit=120)
    bars60 = await get_bars_crypto(CRYPTO_USD_PAIRS, "1Hour", limit=120)

    ranked: List[Tuple[float, str, List[Dict[str, Any]]]] = []
    for sym in CRYPTO_USD_PAIRS:
        raw15 = (bars15.get("bars") or {}).get(sym, [])
        raw30 = (bars30.get("bars") or {}).get(sym, [])
        raw60 = (bars60.get("bars") or {}).get(sym, [])
        if not raw15 or not raw30 or not raw60:
            continue

        c15 = [float(x["c"]) for x in raw15]
        c30 = [float(x["c"]) for x in raw30]
        c60 = [float(x["c"]) for x in raw60]

        score = rank_score(
            c15, c30, c60,
            conf["rsi_buy"], conf["rsi_sell"],
            conf["ema_fast"], conf["ema_slow"]
        )
        ranked.append((score, sym, raw15))

    ranked.sort(reverse=True)
    rep = (
        f"üì° –°–∫–∞–Ω–µ—Ä (–∫—Ä–∏–ø—Ç–∞):\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö USD-–ø–∞—Ä: {len(CRYPTO_USD_PAIRS)}\n"
        f"‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ (–ª—ñ–º—ñ—Ç–æ–º): {min(conf['top_n'], len(ranked))}\n"
        f"‚Ä¢ –ü–µ—Ä—à—ñ 25: " + ", ".join([s for _, s, _ in ranked[:25]]) if ranked else "–ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—ñ–≤"
    )
    return rep, ranked
# ========= Orders =========
async def place_notional_order(sym: str, side: str, notional: float) -> Any:
    payload = {
        "symbol": sym.replace("/", ""),   # –¥–ª—è crypto –¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–ª–µ—à–∞
        "side": side,                     # buy / sell
        "type": "market",
        "time_in_force": "gtc",
        "notional": str(float(notional)),
    }
    return await alp_post("orders", payload)

# ========= Commands =========
async def start_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    stedef(u.effective_chat.id)
    await u.message.reply_text(
        "üëã –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π.\n"
        "‚Ä¢ /signals_crypto ‚Äî —Å–∫–∞–Ω —ñ, —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ, –∞–≤—Ç–æ—Ç—Ä–µ–π–¥\n"
        "‚Ä¢ /trade_crypto ‚Äî –º–∏—Ç—Ç—î–≤–∏–π —Ç—Ä–µ–π–¥ —Ç–æ–ø-N\n"
        "‚Ä¢ /alp_on /alp_off /alp_status\n"
        "‚Ä¢ /long_mode /short_mode /both_mode\n"
        "‚Ä¢ –†–µ–∂–∏–º–∏ —Ä–∏–∑–∏–∫—É: /aggressive /scalp /default /swing /safe\n\n"
        "Short –¥–ª—è –∫—Ä–∏–ø—Ç–∏ (spot) **–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è** ‚Äî –±–æ—Ç –±–ª–æ–∫—É—î —Ç–∞–∫—ñ –∑–∞—è–≤–∫–∏.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=main_keyboard()
    )

async def help_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    await start_cmd(u, c)

async def set_mode(u: Update, mode: str) -> None:
    st = stedef(u.effective_chat.id)
    st["mode"] = mode
    await u.message.reply_text(f"‚úÖ Mode: {mode.upper()}", reply_markup=main_keyboard())

async def aggressive_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE): await set_mode(u, "aggressive")
async def scalp_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):      await set_mode(u, "scalp")
async def default_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):    await set_mode(u, "default")
async def swing_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):      await set_mode(u, "swing")
async def safe_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):       await set_mode(u, "safe")

async def long_mode_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    stedef(u.effective_chat.id)["side_mode"] = "long"
    await u.message.reply_text("üîÅ –†–µ–∂–∏–º –≤—Ö–æ–¥—ñ–≤: LONG", reply_markup=main_keyboard())

async def short_mode_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    stedef(u.effective_chat.id)["side_mode"] = "short"
    await u.message.reply_text("üîÅ –†–µ–∂–∏–º –≤—Ö–æ–¥—ñ–≤: SHORT (–¥–ª—è –∫—Ä–∏–ø—Ç–∏ –±—É–¥–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ)", reply_markup=main_keyboard())

async def both_mode_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    stedef(u.effective_chat.id)["side_mode"] = "both"
    await u.message.reply_text("üîÅ –†–µ–∂–∏–º –≤—Ö–æ–¥—ñ–≤: BOTH (–∫—Ä–∏–ø—Ç–∞ short ‚Äî –∑–∞–±–ª–æ–∫—É—î–º–æ)", reply_markup=main_keyboard())

async def alp_on_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    stedef(u.effective_chat.id)["autotrade"] = True
    await u.message.reply_text("‚úÖ Alpaca AUTOTRADE: ON", reply_markup=main_keyboard())

async def alp_off_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    stedef(u.effective_chat.id)["autotrade"] = False
    await u.message.reply_text("‚èπ Alpaca AUTOTRADE: OFF", reply_markup=main_keyboard())

async def alp_status_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    try:
        acc = await alp_account()
        await u.message.reply_text(
            "üíº Alpaca:\n"
            f"‚Ä¢ status={acc.get('status','?')}\n"
            f"‚Ä¢ cash=${float(acc.get('cash',0)):,.2f}\n"
            f"‚Ä¢ buying_power=${float(acc.get('buying_power',0)):,.2f}\n"
            f"‚Ä¢ equity=${float(acc.get('equity',0)):,.2f}\n"
            f"Mode={stedef(u.effective_chat.id)['mode']} ¬∑ "
            f"Autotrade={'ON' if stedef(u.effective_chat.id)['autotrade'] else 'OFF'} ¬∑ "
            f"Side={stedef(u.effective_chat.id)['side_mode']}",
            reply_markup=main_keyboard()
        )
    except Exception as e:
        await u.message.reply_text(f"‚ùå Alpaca error: {e}")

# ---- core scanning ----
async def signals_crypto(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    try:
        report, ranked = await scan_rank_crypto(st)
        await u.message.reply_text(report)
        if st.get("autotrade") and ranked:
            picks = ranked[: mode_conf(st)["top_n"]]
            for _, sym, arr in picks:
                # –Ω–∞–ø—Ä—è–º–æ–∫ –∑–≥—ñ–¥–Ω–æ side_mode
                sides = ["buy"] if st.get("side_mode","long") == "long" \
                    else (["sell"] if st.get("side_mode") == "short" else ["buy","sell"])

                for side in sides:
                    if is_crypto_pair(sym) and side == "sell":
                        await u.message.reply_text("Short –¥–ª—è –∫—Ä–∏–ø—Ç–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è Alpaca (spot).")
                        continue
                    try:
                        await place_notional_order(sym, side, ALPACA_NOTIONAL)
                        await u.message.reply_text(f"üü¢ ORDER OK: {sym} {side.upper()} ${ALPACA_NOTIONAL:.2f}")
                    except Exception as e:
                        await u.message.reply_text(f"üî¥ ORDER FAIL {sym} {side.upper()}: {e}")
    except Exception as e:
        await u.message.reply_text(f"üî¥ crypto scan error: {e}")

# ---- one-tap trading without extra report ----
async def trade_crypto(u: Update, c: ContextTypes.DEFAULT_TYPE) -> None:
    st = stedef(u.effective_chat.id)
    try:
        _, ranked = await scan_rank_crypto(st)
        if not ranked:
            await u.message.reply_text("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ")
            return
        picks = ranked[: mode_conf(st)["top_n"]]
        for _, sym, _ in picks:
            sides = ["buy"] if st.get("side_mode","long") == "long" \
                else (["sell"] if st.get("side_mode") == "short" else ["buy","sell"])
            for side in sides:
                if is_crypto_pair(sym) and side == "sell":
                    await u.message.reply_text("Short –¥–ª—è –∫—Ä–∏–ø—Ç–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è Alpaca (spot).")
                    continue
                try:
                    await place_notional_order(sym, side, ALPACA_NOTIONAL)
                    await u.message.reply_text(f"üü¢ ORDER OK: {sym} {side.upper()} ${ALPACA_NOTIONAL:.2f}")
                except Exception as e:
                    await u.message.reply_text(f"üî¥ ORDER FAIL {sym} {side.upper()}: {e}")
    except Exception as e:
        await u.message.reply_text(f"üî¥ trade_crypto error: {e}")

# ========= Background job =========
async def periodic_scan_job(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    for chat_id, st in list(STATE.items()):
        try:
            report, ranked = await scan_rank_crypto(st)
            await ctx.bot.send_message(chat_id, report)
            if st.get("autotrade") and ranked:
                picks = ranked[: mode_conf(st)["top_n"]]
                for _, sym, _ in picks:
                    sides = ["buy"] if st.get("side_mode","long") == "long" \
                        else (["sell"] if st.get("side_mode") == "short" else ["buy","sell"])
                    for side in sides:
                        if is_crypto_pair(sym) and side == "sell":
                            await ctx.bot.send_message(chat_id, "Short –¥–ª—è –∫—Ä–∏–ø—Ç–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è Alpaca (spot).")
                            continue
                        try:
                            await place_notional_order(sym, side, ALPACA_NOTIONAL)
                            await ctx.bot.send_message(chat_id, f"üü¢ ORDER OK: {sym} {side.upper()} ${ALPACA_NOTIONAL:.2f}")
                        except Exception as e:
                            await ctx.bot.send_message(chat_id, f"üî¥ ORDER FAIL {sym} {side.upper()}: {e}")
        except Exception as e:
            try:
                await ctx.bot.send_message(chat_id, f"üî¥ periodic_scan error: {e}")
            except Exception:
                pass

# ========= APP =========
def main():
    if not TG_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ")

    app = Application.builder().token(TG_TOKEN).build()

    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("help", help_cmd))

    app.add_handler(CommandHandler("aggressive", aggressive_cmd))
    app.add_handler(CommandHandler("scalp", scalp_cmd))
    app.add_handler(CommandHandler("default", default_cmd))
    app.add_handler(CommandHandler("swing", swing_cmd))
    app.add_handler(CommandHandler("safe", safe_cmd))

    app.add_handler(CommandHandler("long_mode", long_mode_cmd))
    app.add_handler(CommandHandler("short_mode", short_mode_cmd))
    app.add_handler(CommandHandler("both_mode", both_mode_cmd))

    app.add_handler(CommandHandler("alp_on", alp_on_cmd))
    app.add_handler(CommandHandler("alp_off", alp_off_cmd))
    app.add_handler(CommandHandler("alp_status", alp_status_cmd))

    app.add_handler(CommandHandler("signals_crypto", signals_crypto))
    app.add_handler(CommandHandler("trade_crypto", trade_crypto))

    app.job_queue.run_repeating(periodic_scan_job, interval=SCAN_EVERY_SEC, first=5)

    app.run_polling()

if __name__ == "__main__":
    main()
